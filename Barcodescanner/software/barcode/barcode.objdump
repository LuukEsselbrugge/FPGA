
barcode.elf:     file format elf32-littlenios2
barcode.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0018014c

Program Header:
    LOAD off    0x00001000 vaddr 0x00180000 paddr 0x00180000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00180020 paddr 0x00180020 align 2**12
         filesz 0x00001770 memsz 0x00001770 flags r-x
    LOAD off    0x00002790 vaddr 0x00181790 paddr 0x00181f64 align 2**12
         filesz 0x000007d4 memsz 0x000007d4 flags rw-
    LOAD off    0x00003738 vaddr 0x00182738 paddr 0x00182738 align 2**12
         filesz 0x00000000 memsz 0x00000520 flags rw-
    LOAD off    0x00003000 vaddr 0x00008000 paddr 0x00182c58 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00180000  00180000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000012c  00180020  00180020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000151c  0018014c  0018014c  0000114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000128  00181668  00181668  00002668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000007d4  00181790  00181f64  00002790  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000520  00182738  00182738  00003738  2**2
                  ALLOC, SMALL_DATA
  6 .VideoRAM     00000000  00000000  00000000  00003080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00008000  00182c58  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .onchip_memory 00000000  00182cd8  00182cd8  00003080  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000400  00000000  00000000  000030a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00003bed  00000000  00000000  000034a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000018ac  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001a24  00000000  00000000  00008941  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006fc  00000000  00000000  0000a368  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000011fa  00000000  00000000  0000aa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001c58  00000000  00000000  0000bc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  0000d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000250  00000000  00000000  0000d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0000f516  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  0000f519  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000f51e  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000f51f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0000f520  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0000f529  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0000f532  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000013  00000000  00000000  0000f53b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001e  00000000  00000000  0000f54e  2**0
                  CONTENTS, READONLY
 28 .jdi          0000587f  00000000  00000000  0000f56c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000737a6  00000000  00000000  00014deb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00180000 l    d  .entry	00000000 .entry
00180020 l    d  .exceptions	00000000 .exceptions
0018014c l    d  .text	00000000 .text
00181668 l    d  .rodata	00000000 .rodata
00181790 l    d  .rwdata	00000000 .rwdata
00182738 l    d  .bss	00000000 .bss
00000000 l    d  .VideoRAM	00000000 .VideoRAM
00008000 l    d  .descriptor_memory	00000000 .descriptor_memory
00182cd8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../barcode_bsp//obj/HAL/src/crt0.o
00180184 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00180094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 network.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00181f20 l     O .rwdata	00000030 sgdma_rx
00181ef0 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00180c28 l     F .text	0000005c alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
001809b4 g     F .text	0000002c alt_main
00180574 g     F .text	000000f0 rx_ethernet_isr
00182b58 g     O .bss	00000100 alt_irq
00181f64 g       *ABS*	00000000 __flash_rwdata_start
00180240 g     F .text	000002cc showText
00180d00 g     F .text	00000080 alt_avalon_sgdma_do_sync_transfer
00180e8c g     F .text	00000114 alt_avalon_sgdma_construct_descriptor_burst
00181f50 g     O .rwdata	00000004 jtag_uart
00181454 g     F .text	00000008 altera_nios2_gen2_irq_init
00180000 g     F .entry	0000000c __reset
00181020 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00180020 g       *ABS*	00000000 __flash_exceptions_start
00182754 g     O .bss	00000004 errno
00182748 g     O .bss	00000004 alt_argv
00189f50 g       *ABS*	00000000 _gp
00180b98 g     F .text	00000004 usleep
00000000 g       *ABS*	00000000 __alt_mem_VideoRAM
001812e8 g     F .text	00000074 alt_find_dev
00180890 g     F .text	00000028 memcpy
00181090 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00181584 g     F .text	00000064 .hidden __udivsi3
001801a0 g     F .text	000000a0 drawChars
00180da8 g     F .text	0000001c alt_avalon_sgdma_stop
00181274 g     F .text	00000004 alt_dcache_flush
00182c58 g       *ABS*	00000000 __bss_end
001813ec g     F .text	00000068 alt_iic_isr_register
00180c84 g     F .text	0000007c alt_avalon_sgdma_do_async_transfer
00008000 g     O .descriptor_memory	00000020 rx_descriptor_end
001813d4 g     F .text	00000018 alt_ic_irq_enabled
00008000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00182750 g     O .bss	00000004 alt_irq_active
00181af0 g     O .rwdata	00000400 tx_frame
001800ec g     F .exceptions	00000060 alt_irq_handler
00180dc4 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
00181278 g     F .text	00000004 alt_dcache_flush_all
00008020 g     O .descriptor_memory	00000020 rx_descriptor
00181f64 g       *ABS*	00000000 __ram_rwdata_end
00180000 g       *ABS*	00000000 __alt_mem_onchip_memory
00181790 g     O .rwdata	00000360 charTemplate
00180e3c g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
00181790 g       *ABS*	00000000 __ram_rodata_end
001815e8 g     F .text	00000058 .hidden __umodsi3
001810e0 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00180d80 g     F .text	00000010 alt_avalon_sgdma_register_callback
00182cd8 g       *ABS*	00000000 end
001cb000 g       *ABS*	00000000 __alt_stack_pointer
00180e6c g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
00180bf4 g     F .text	00000034 altera_avalon_jtag_uart_write
00180fe8 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00181068 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
001809e0 g     F .text	00000170 alt_printf
001807d8 g     F .text	00000004 refresh_ethernet
0018014c g     F .text	0000003c _start
00182738 g     O .bss	00000004 sgdma_tx_dev
00180df0 g     F .text	0000004c alt_avalon_sgdma_open
0018273c g     O .bss	00000004 text_length
00180bbc g     F .text	00000038 alt_sys_init
00181640 g     F .text	00000028 .hidden __mulsi3
00181790 g       *ABS*	00000000 __ram_rwdata_start
00181668 g       *ABS*	00000000 __ram_rodata_start
001811ec g     F .text	00000088 alt_busy_sleep
0018145c g     F .text	00000030 memcmp
00182cd8 g       *ABS*	00000000 __alt_stack_base
0018127c g     F .text	0000006c alt_dev_llist_insert
00180d90 g     F .text	00000018 alt_avalon_sgdma_start
00182738 g       *ABS*	00000000 __bss_start
00180540 g     F .text	00000034 main
00182744 g     O .bss	00000004 alt_envp
00181f54 g     O .rwdata	00000008 alt_sgdma_list
00181f5c g     O .rwdata	00000004 alt_errno
00008060 g     O .descriptor_memory	00000020 tx_descriptor
00182758 g     O .bss	00000400 rx_frame
0018148c g     F .text	00000084 .hidden __divsi3
00181668 g       *ABS*	00000000 __flash_rodata_start
00180b9c g     F .text	00000020 alt_irq_init
0018274c g     O .bss	00000004 alt_argc
00180020 g       .exceptions	00000000 alt_irq_entry
00180664 g     F .text	00000174 setup
00180020 g       *ABS*	00000000 __ram_exceptions_start
00181360 g     F .text	00000004 alt_ic_isr_register
00181f64 g       *ABS*	00000000 _edata
00182cd8 g       *ABS*	00000000 _end
0018014c g       *ABS*	00000000 __ram_exceptions_end
00180188 g     F .text	00000018 clearText
001807dc g     F .text	000000b4 tx_ethernet_isr
0018139c g     F .text	00000038 alt_ic_irq_disable
00008040 g     O .descriptor_memory	00000020 tx_descriptor_end
00181120 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
00181510 g     F .text	00000074 .hidden __modsi3
001cb000 g       *ABS*	00000000 __alt_data_end
00180020 g     F .exceptions	00000000 alt_exception
00182740 g     O .bss	00000004 sgdma_rx_dev
0018050c g     F .text	00000034 callback
0018000c g       .entry	00000000 _exit
001808b8 g     F .text	0000001c strlen
00180b50 g     F .text	00000048 alt_putchar
0018135c g     F .text	00000004 alt_icache_flush_all
00181f60 g     O .rwdata	00000004 alt_priority_mask
00181364 g     F .text	00000038 alt_ic_irq_enable
00180fa0 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
001808d4 g     F .text	000000e0 alt_load
00181168 g     F .text	00000084 alt_avalon_sgdma_init



Disassembly of section .entry:

00180000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  180000:	00400634 	movhi	at,24
    ori r1, r1, %lo(_start)
  180004:	08405314 	ori	at,at,332
    jmp r1
  180008:	0800683a 	jmp	at

0018000c <_exit>:
	...

Disassembly of section .exceptions:

00180020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  180020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  180024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  180028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  18002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  180030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  180034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  180038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  18003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  180040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  180044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  180048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  18004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  180050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  180054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  180058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  18005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  180060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  180064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  180068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  18006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  180070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  180074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  180078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  18007c:	10000326 	beq	r2,zero,18008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  180080:	20000226 	beq	r4,zero,18008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  180084:	01800ec0 	call	1800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  180088:	00000306 	br	180098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  18008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  180090:	e8bfff17 	ldw	r2,-4(ea)

00180094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  180094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  180098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  18009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  1800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  1800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  1800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  1800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  1800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  1800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  1800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  1800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  1800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  1800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  1800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  1800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  1800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1800e8:	ef80083a 	eret

001800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1800ec:	defffe04 	addi	sp,sp,-8
  1800f0:	dfc00115 	stw	ra,4(sp)
  1800f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  1800f8:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  1800fc:	04000634 	movhi	r16,24
  180100:	840ad604 	addi	r16,r16,11096

  active = alt_irq_pending ();

  do
  {
    i = 0;
  180104:	0005883a 	mov	r2,zero
    mask = 1;
  180108:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  18010c:	20ca703a 	and	r5,r4,r3
  180110:	28000b26 	beq	r5,zero,180140 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  180114:	100490fa 	slli	r2,r2,3
  180118:	8085883a 	add	r2,r16,r2
  18011c:	10c00017 	ldw	r3,0(r2)
  180120:	11000117 	ldw	r4,4(r2)
  180124:	183ee83a 	callr	r3
  180128:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  18012c:	203ff51e 	bne	r4,zero,180104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  180130:	dfc00117 	ldw	ra,4(sp)
  180134:	dc000017 	ldw	r16,0(sp)
  180138:	dec00204 	addi	sp,sp,8
  18013c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  180140:	18c7883a 	add	r3,r3,r3
      i++;
  180144:	10800044 	addi	r2,r2,1

    } while (1);
  180148:	003ff006 	br	18010c <alt_irq_handler+0x20>

Disassembly of section .text:

0018014c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  18014c:	06c00734 	movhi	sp,28
    ori sp, sp, %lo(__alt_stack_pointer)
  180150:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
  180154:	06800634 	movhi	gp,24
    ori gp, gp, %lo(_gp)
  180158:	d6a7d414 	ori	gp,gp,40784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  18015c:	00800634 	movhi	r2,24
    ori r2, r2, %lo(__bss_start)
  180160:	1089ce14 	ori	r2,r2,10040

    movhi r3, %hi(__bss_end)
  180164:	00c00634 	movhi	r3,24
    ori r3, r3, %lo(__bss_end)
  180168:	18cb1614 	ori	r3,r3,11352

    beq r2, r3, 1f
  18016c:	10c00326 	beq	r2,r3,18017c <_start+0x30>

0:
    stw zero, (r2)
  180170:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  180174:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  180178:	10fffd36 	bltu	r2,r3,180170 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  18017c:	01808d40 	call	1808d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  180180:	01809b40 	call	1809b4 <alt_main>

00180184 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  180184:	003fff06 	br	180184 <alt_after_alt_main>

00180188 <clearText>:
			}

	};

	void clearText(){
		for(int x = 0; x < 10000; x+=4){
  180188:	0005883a 	mov	r2,zero
  18018c:	00c9c404 	movi	r3,10000
			IOWR_ALTERA_AVALON_PIO_DATA(x ,(0<<16)| (0<<8) | 0);
  180190:	10000035 	stwio	zero,0(r2)
			}

	};

	void clearText(){
		for(int x = 0; x < 10000; x+=4){
  180194:	10800104 	addi	r2,r2,4
  180198:	10fffd1e 	bne	r2,r3,180190 <clearText+0x8>
			IOWR_ALTERA_AVALON_PIO_DATA(x ,(0<<16)| (0<<8) | 0);
		}
	}
  18019c:	f800283a 	ret

001801a0 <drawChars>:

	void drawChars(int pixels[35][8]){
  1801a0:	defffe04 	addi	sp,sp,-8
  1801a4:	dc000015 	stw	r16,0(sp)
  1801a8:	dfc00115 	stw	ra,4(sp)
  1801ac:	2021883a 	mov	r16,r4
			int totalChars = 35;
			int add = 0;
			int x = 0;
			int linePixelCount = 0;
			clearText();
  1801b0:	01801880 	call	180188 <clearText>
  1801b4:	8009883a 	mov	r4,r16
  1801b8:	82800804 	addi	r10,r16,32
		}
	}

	void drawChars(int pixels[35][8]){
			int totalChars = 35;
			int add = 0;
  1801bc:	000f883a 	mov	r7,zero
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
					for(int bit = 4; bit >= 0; bit--){
  1801c0:	02ffffc4 	movi	r11,-1
			int linePixelCount = 0;
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
  1801c4:	03011804 	movi	r12,1120
					for(int bit = 4; bit >= 0; bit--){
						linePixelCount++;
						int val = 0;
						if((pixels[currentChar][pixel] & (1 << bit)) != 0){
							val = 255;
  1801c8:	380d883a 	mov	r6,r7
  1801cc:	0007883a 	mov	r3,zero
		for(int x = 0; x < 10000; x+=4){
			IOWR_ALTERA_AVALON_PIO_DATA(x ,(0<<16)| (0<<8) | 0);
		}
	}

	void drawChars(int pixels[35][8]){
  1801d0:	3011883a 	mov	r8,r6
  1801d4:	01400104 	movi	r5,4
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
					for(int bit = 4; bit >= 0; bit--){
						linePixelCount++;
						int val = 0;
						if((pixels[currentChar][pixel] & (1 << bit)) != 0){
  1801d8:	20db883a 	add	r13,r4,r3
  1801dc:	68800017 	ldw	r2,0(r13)
  1801e0:	1145d83a 	sra	r2,r2,r5
  1801e4:	1080004c 	andi	r2,r2,1
  1801e8:	10000226 	beq	r2,zero,1801f4 <drawChars+0x54>
							val = 255;
  1801ec:	00803fc4 	movi	r2,255
  1801f0:	00000106 	br	1801f8 <drawChars+0x58>
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
					for(int bit = 4; bit >= 0; bit--){
						linePixelCount++;
						int val = 0;
  1801f4:	0005883a 	mov	r2,zero
						if((pixels[currentChar][pixel] & (1 << bit)) != 0){
							val = 255;
						}
						IOWR_ALTERA_AVALON_PIO_DATA(add ,(val<<16)| (val<<8) | val);
  1801f8:	101c943a 	slli	r14,r2,16
  1801fc:	1012923a 	slli	r9,r2,8
  180200:	7252b03a 	or	r9,r14,r9
  180204:	4884b03a 	or	r2,r9,r2
  180208:	40800035 	stwio	r2,0(r8)
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
					for(int bit = 4; bit >= 0; bit--){
  18020c:	297fffc4 	addi	r5,r5,-1
						if((pixels[currentChar][pixel] & (1 << bit)) != 0){
							val = 255;
						}
						IOWR_ALTERA_AVALON_PIO_DATA(add ,(val<<16)| (val<<8) | val);
						x++;
						add+=4;
  180210:	42000104 	addi	r8,r8,4
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
					for(int bit = 4; bit >= 0; bit--){
  180214:	2afff11e 	bne	r5,r11,1801dc <drawChars+0x3c>
  180218:	18c00804 	addi	r3,r3,32
  18021c:	31800604 	addi	r6,r6,24
			int linePixelCount = 0;
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
				//Draw all chars to video memory used by VGA controller
				for(int currentChar = 0; currentChar < totalChars; currentChar++){
  180220:	1b3feb1e 	bne	r3,r12,1801d0 <drawChars+0x30>
  180224:	21000104 	addi	r4,r4,4
						add+=4;
					}
					add+=4;
				}
				if(linePixelCount == (5*totalChars)){
					add+=(800-(24*totalChars));
  180228:	39c0c804 	addi	r7,r7,800
			int add = 0;
			int x = 0;
			int linePixelCount = 0;
			clearText();
			int pixel = 0;
			while(x < 40*totalChars){
  18022c:	513fe61e 	bne	r10,r4,1801c8 <drawChars+0x28>
					add+=(800-(24*totalChars));
					linePixelCount = 0;
				}
				pixel++;
			}
		}
  180230:	dfc00117 	ldw	ra,4(sp)
  180234:	dc000017 	ldw	r16,0(sp)
  180238:	dec00204 	addi	sp,sp,8
  18023c:	f800283a 	ret

00180240 <showText>:


void showText(char *chars){
  180240:	defee504 	addi	sp,sp,-1132
  180244:	dc411915 	stw	r17,1124(sp)
  180248:	dc011815 	stw	r16,1120(sp)
  18024c:	dfc11a15 	stw	ra,1128(sp)
  180250:	2021883a 	mov	r16,r4
  180254:	d807883a 	mov	r3,sp
  180258:	244008c4 	addi	r17,r4,35
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  18025c:	80800007 	ldb	r2,0(r16)
  180260:	01001b44 	movi	r4,109
  180264:	11007026 	beq	r2,r4,180428 <showText+0x1e8>
  180268:	20802616 	blt	r4,r2,180304 <showText+0xc4>
  18026c:	01001984 	movi	r4,102
  180270:	11005926 	beq	r2,r4,1803d8 <showText+0x198>
  180274:	20801116 	blt	r4,r2,1802bc <showText+0x7c>
  180278:	01001884 	movi	r4,98
  18027c:	11004a26 	beq	r2,r4,1803a8 <showText+0x168>
  180280:	20800716 	blt	r4,r2,1802a0 <showText+0x60>
  180284:	01800804 	movi	r6,32
  180288:	11808f26 	beq	r2,r6,1804c8 <showText+0x288>
  18028c:	01001844 	movi	r4,97
  180290:	11008f1e 	bne	r2,r4,1804d0 <showText+0x290>
		  case 'a': memcpy(&pixeldata[x], &charTemplate[0], sizeof(pixeldata[x]) ); break;
  180294:	01400634 	movhi	r5,24
  180298:	2945e404 	addi	r5,r5,6032
  18029c:	00008f06 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  1802a0:	01001904 	movi	r4,100
  1802a4:	11004426 	beq	r2,r4,1803b8 <showText+0x178>
  1802a8:	20804716 	blt	r4,r2,1803c8 <showText+0x188>
		  case 'a': memcpy(&pixeldata[x], &charTemplate[0], sizeof(pixeldata[x]) ); break;
		  case 'b': memcpy(&pixeldata[x], &charTemplate[1], sizeof(pixeldata[x]) ); break;
		  case 'c': memcpy(&pixeldata[x], &charTemplate[2], sizeof(pixeldata[x]) ); break;
  1802ac:	01400634 	movhi	r5,24
  1802b0:	01800804 	movi	r6,32
  1802b4:	2945f404 	addi	r5,r5,6096
  1802b8:	00008806 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  1802bc:	01001a44 	movi	r4,105
  1802c0:	11004d26 	beq	r2,r4,1803f8 <showText+0x1b8>
  1802c4:	20800816 	blt	r4,r2,1802e8 <showText+0xa8>
  1802c8:	010019c4 	movi	r4,103
  1802cc:	11004626 	beq	r2,r4,1803e8 <showText+0x1a8>
  1802d0:	01001a04 	movi	r4,104
  1802d4:	11007e1e 	bne	r2,r4,1804d0 <showText+0x290>
		  case 'c': memcpy(&pixeldata[x], &charTemplate[2], sizeof(pixeldata[x]) ); break;
		  case 'd': memcpy(&pixeldata[x], &charTemplate[3], sizeof(pixeldata[x]) ); break;
		  case 'e': memcpy(&pixeldata[x], &charTemplate[4], sizeof(pixeldata[x]) ); break;
		  case 'f': memcpy(&pixeldata[x], &charTemplate[5], sizeof(pixeldata[x]) ); break;
		  case 'g': memcpy(&pixeldata[x], &charTemplate[6], sizeof(pixeldata[x]) ); break;
		  case 'h': memcpy(&pixeldata[x], &charTemplate[7], sizeof(pixeldata[x]) ); break;
  1802d8:	01400634 	movhi	r5,24
  1802dc:	01800804 	movi	r6,32
  1802e0:	29461c04 	addi	r5,r5,6256
  1802e4:	00007d06 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  1802e8:	01001ac4 	movi	r4,107
  1802ec:	11004626 	beq	r2,r4,180408 <showText+0x1c8>
  1802f0:	20804916 	blt	r4,r2,180418 <showText+0x1d8>
		  case 'e': memcpy(&pixeldata[x], &charTemplate[4], sizeof(pixeldata[x]) ); break;
		  case 'f': memcpy(&pixeldata[x], &charTemplate[5], sizeof(pixeldata[x]) ); break;
		  case 'g': memcpy(&pixeldata[x], &charTemplate[6], sizeof(pixeldata[x]) ); break;
		  case 'h': memcpy(&pixeldata[x], &charTemplate[7], sizeof(pixeldata[x]) ); break;
		  case 'i': memcpy(&pixeldata[x], &charTemplate[8], sizeof(pixeldata[x]) ); break;
		  case 'j': memcpy(&pixeldata[x], &charTemplate[9], sizeof(pixeldata[x]) ); break;
  1802f4:	01400634 	movhi	r5,24
  1802f8:	01800804 	movi	r6,32
  1802fc:	29462c04 	addi	r5,r5,6320
  180300:	00007606 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  180304:	01001d04 	movi	r4,116
  180308:	11005b26 	beq	r2,r4,180478 <showText+0x238>
  18030c:	20801216 	blt	r4,r2,180358 <showText+0x118>
  180310:	01001c04 	movi	r4,112
  180314:	11004c26 	beq	r2,r4,180448 <showText+0x208>
  180318:	20800816 	blt	r4,r2,18033c <showText+0xfc>
  18031c:	01001b84 	movi	r4,110
  180320:	11004526 	beq	r2,r4,180438 <showText+0x1f8>
  180324:	01001bc4 	movi	r4,111
  180328:	1100691e 	bne	r2,r4,1804d0 <showText+0x290>
		  case 'j': memcpy(&pixeldata[x], &charTemplate[9], sizeof(pixeldata[x]) ); break;
		  case 'k': memcpy(&pixeldata[x], &charTemplate[10], sizeof(pixeldata[x]) ); break;
		  case 'l': memcpy(&pixeldata[x], &charTemplate[11], sizeof(pixeldata[x]) ); break;
		  case 'm': memcpy(&pixeldata[x], &charTemplate[12], sizeof(pixeldata[x]) ); break;
		  case 'n': memcpy(&pixeldata[x], &charTemplate[13], sizeof(pixeldata[x]) ); break;
		  case 'o': memcpy(&pixeldata[x], &charTemplate[14], sizeof(pixeldata[x]) ); break;
  18032c:	01400634 	movhi	r5,24
  180330:	01800804 	movi	r6,32
  180334:	29465404 	addi	r5,r5,6480
  180338:	00006806 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  18033c:	01001c84 	movi	r4,114
  180340:	11004526 	beq	r2,r4,180458 <showText+0x218>
  180344:	20804816 	blt	r4,r2,180468 <showText+0x228>
		  case 'l': memcpy(&pixeldata[x], &charTemplate[11], sizeof(pixeldata[x]) ); break;
		  case 'm': memcpy(&pixeldata[x], &charTemplate[12], sizeof(pixeldata[x]) ); break;
		  case 'n': memcpy(&pixeldata[x], &charTemplate[13], sizeof(pixeldata[x]) ); break;
		  case 'o': memcpy(&pixeldata[x], &charTemplate[14], sizeof(pixeldata[x]) ); break;
		  case 'p': memcpy(&pixeldata[x], &charTemplate[15], sizeof(pixeldata[x]) ); break;
		  case 'q': memcpy(&pixeldata[x], &charTemplate[16], sizeof(pixeldata[x]) ); break;
  180348:	01400634 	movhi	r5,24
  18034c:	01800804 	movi	r6,32
  180350:	29466404 	addi	r5,r5,6544
  180354:	00006106 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  180358:	01001dc4 	movi	r4,119
  18035c:	11004e26 	beq	r2,r4,180498 <showText+0x258>
  180360:	20800816 	blt	r4,r2,180384 <showText+0x144>
  180364:	01001d44 	movi	r4,117
  180368:	11004726 	beq	r2,r4,180488 <showText+0x248>
  18036c:	01001d84 	movi	r4,118
  180370:	1100571e 	bne	r2,r4,1804d0 <showText+0x290>
		  case 'q': memcpy(&pixeldata[x], &charTemplate[16], sizeof(pixeldata[x]) ); break;
		  case 'r': memcpy(&pixeldata[x], &charTemplate[17], sizeof(pixeldata[x]) ); break;
		  case 's': memcpy(&pixeldata[x], &charTemplate[18], sizeof(pixeldata[x]) ); break;
		  case 't': memcpy(&pixeldata[x], &charTemplate[19], sizeof(pixeldata[x]) ); break;
		  case 'u': memcpy(&pixeldata[x], &charTemplate[20], sizeof(pixeldata[x]) ); break;
		  case 'v': memcpy(&pixeldata[x], &charTemplate[21], sizeof(pixeldata[x]) ); break;
  180374:	01400634 	movhi	r5,24
  180378:	01800804 	movi	r6,32
  18037c:	29468c04 	addi	r5,r5,6704
  180380:	00005606 	br	1804dc <showText+0x29c>


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
  180384:	01001e44 	movi	r4,121
  180388:	11004b26 	beq	r2,r4,1804b8 <showText+0x278>
  18038c:	11004616 	blt	r2,r4,1804a8 <showText+0x268>
  180390:	01001e84 	movi	r4,122
  180394:	11004e1e 	bne	r2,r4,1804d0 <showText+0x290>
		  case 'u': memcpy(&pixeldata[x], &charTemplate[20], sizeof(pixeldata[x]) ); break;
		  case 'v': memcpy(&pixeldata[x], &charTemplate[21], sizeof(pixeldata[x]) ); break;
		  case 'w': memcpy(&pixeldata[x], &charTemplate[22], sizeof(pixeldata[x]) ); break;
		  case 'x': memcpy(&pixeldata[x], &charTemplate[23], sizeof(pixeldata[x]) ); break;
		  case 'y': memcpy(&pixeldata[x], &charTemplate[24], sizeof(pixeldata[x]) ); break;
		  case 'z': memcpy(&pixeldata[x], &charTemplate[25], sizeof(pixeldata[x]) ); break;
  180398:	01400634 	movhi	r5,24
  18039c:	01800804 	movi	r6,32
  1803a0:	2946ac04 	addi	r5,r5,6832
  1803a4:	00004d06 	br	1804dc <showText+0x29c>
void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
		switch (chars[x]) {
		  case 'a': memcpy(&pixeldata[x], &charTemplate[0], sizeof(pixeldata[x]) ); break;
		  case 'b': memcpy(&pixeldata[x], &charTemplate[1], sizeof(pixeldata[x]) ); break;
  1803a8:	01400634 	movhi	r5,24
  1803ac:	01800804 	movi	r6,32
  1803b0:	2945ec04 	addi	r5,r5,6064
  1803b4:	00004906 	br	1804dc <showText+0x29c>
		  case 'c': memcpy(&pixeldata[x], &charTemplate[2], sizeof(pixeldata[x]) ); break;
		  case 'd': memcpy(&pixeldata[x], &charTemplate[3], sizeof(pixeldata[x]) ); break;
  1803b8:	01400634 	movhi	r5,24
  1803bc:	01800804 	movi	r6,32
  1803c0:	2945fc04 	addi	r5,r5,6128
  1803c4:	00004506 	br	1804dc <showText+0x29c>
		  case 'e': memcpy(&pixeldata[x], &charTemplate[4], sizeof(pixeldata[x]) ); break;
  1803c8:	01400634 	movhi	r5,24
  1803cc:	01800804 	movi	r6,32
  1803d0:	29460404 	addi	r5,r5,6160
  1803d4:	00004106 	br	1804dc <showText+0x29c>
		  case 'f': memcpy(&pixeldata[x], &charTemplate[5], sizeof(pixeldata[x]) ); break;
  1803d8:	01400634 	movhi	r5,24
  1803dc:	01800804 	movi	r6,32
  1803e0:	29460c04 	addi	r5,r5,6192
  1803e4:	00003d06 	br	1804dc <showText+0x29c>
		  case 'g': memcpy(&pixeldata[x], &charTemplate[6], sizeof(pixeldata[x]) ); break;
  1803e8:	01400634 	movhi	r5,24
  1803ec:	01800804 	movi	r6,32
  1803f0:	29461404 	addi	r5,r5,6224
  1803f4:	00003906 	br	1804dc <showText+0x29c>
		  case 'h': memcpy(&pixeldata[x], &charTemplate[7], sizeof(pixeldata[x]) ); break;
		  case 'i': memcpy(&pixeldata[x], &charTemplate[8], sizeof(pixeldata[x]) ); break;
  1803f8:	01400634 	movhi	r5,24
  1803fc:	01800804 	movi	r6,32
  180400:	29462404 	addi	r5,r5,6288
  180404:	00003506 	br	1804dc <showText+0x29c>
		  case 'j': memcpy(&pixeldata[x], &charTemplate[9], sizeof(pixeldata[x]) ); break;
		  case 'k': memcpy(&pixeldata[x], &charTemplate[10], sizeof(pixeldata[x]) ); break;
  180408:	01400634 	movhi	r5,24
  18040c:	01800804 	movi	r6,32
  180410:	29463404 	addi	r5,r5,6352
  180414:	00003106 	br	1804dc <showText+0x29c>
		  case 'l': memcpy(&pixeldata[x], &charTemplate[11], sizeof(pixeldata[x]) ); break;
  180418:	01400634 	movhi	r5,24
  18041c:	01800804 	movi	r6,32
  180420:	29463c04 	addi	r5,r5,6384
  180424:	00002d06 	br	1804dc <showText+0x29c>
		  case 'm': memcpy(&pixeldata[x], &charTemplate[12], sizeof(pixeldata[x]) ); break;
  180428:	01400634 	movhi	r5,24
  18042c:	01800804 	movi	r6,32
  180430:	29464404 	addi	r5,r5,6416
  180434:	00002906 	br	1804dc <showText+0x29c>
		  case 'n': memcpy(&pixeldata[x], &charTemplate[13], sizeof(pixeldata[x]) ); break;
  180438:	01400634 	movhi	r5,24
  18043c:	01800804 	movi	r6,32
  180440:	29464c04 	addi	r5,r5,6448
  180444:	00002506 	br	1804dc <showText+0x29c>
		  case 'o': memcpy(&pixeldata[x], &charTemplate[14], sizeof(pixeldata[x]) ); break;
		  case 'p': memcpy(&pixeldata[x], &charTemplate[15], sizeof(pixeldata[x]) ); break;
  180448:	01400634 	movhi	r5,24
  18044c:	01800804 	movi	r6,32
  180450:	29465c04 	addi	r5,r5,6512
  180454:	00002106 	br	1804dc <showText+0x29c>
		  case 'q': memcpy(&pixeldata[x], &charTemplate[16], sizeof(pixeldata[x]) ); break;
		  case 'r': memcpy(&pixeldata[x], &charTemplate[17], sizeof(pixeldata[x]) ); break;
  180458:	01400634 	movhi	r5,24
  18045c:	01800804 	movi	r6,32
  180460:	29466c04 	addi	r5,r5,6576
  180464:	00001d06 	br	1804dc <showText+0x29c>
		  case 's': memcpy(&pixeldata[x], &charTemplate[18], sizeof(pixeldata[x]) ); break;
  180468:	01400634 	movhi	r5,24
  18046c:	01800804 	movi	r6,32
  180470:	29467404 	addi	r5,r5,6608
  180474:	00001906 	br	1804dc <showText+0x29c>
		  case 't': memcpy(&pixeldata[x], &charTemplate[19], sizeof(pixeldata[x]) ); break;
  180478:	01400634 	movhi	r5,24
  18047c:	01800804 	movi	r6,32
  180480:	29467c04 	addi	r5,r5,6640
  180484:	00001506 	br	1804dc <showText+0x29c>
		  case 'u': memcpy(&pixeldata[x], &charTemplate[20], sizeof(pixeldata[x]) ); break;
  180488:	01400634 	movhi	r5,24
  18048c:	01800804 	movi	r6,32
  180490:	29468404 	addi	r5,r5,6672
  180494:	00001106 	br	1804dc <showText+0x29c>
		  case 'v': memcpy(&pixeldata[x], &charTemplate[21], sizeof(pixeldata[x]) ); break;
		  case 'w': memcpy(&pixeldata[x], &charTemplate[22], sizeof(pixeldata[x]) ); break;
  180498:	01400634 	movhi	r5,24
  18049c:	01800804 	movi	r6,32
  1804a0:	29469404 	addi	r5,r5,6736
  1804a4:	00000d06 	br	1804dc <showText+0x29c>
		  case 'x': memcpy(&pixeldata[x], &charTemplate[23], sizeof(pixeldata[x]) ); break;
  1804a8:	01400634 	movhi	r5,24
  1804ac:	01800804 	movi	r6,32
  1804b0:	29469c04 	addi	r5,r5,6768
  1804b4:	00000906 	br	1804dc <showText+0x29c>
		  case 'y': memcpy(&pixeldata[x], &charTemplate[24], sizeof(pixeldata[x]) ); break;
  1804b8:	01400634 	movhi	r5,24
  1804bc:	01800804 	movi	r6,32
  1804c0:	2946a404 	addi	r5,r5,6800
  1804c4:	00000506 	br	1804dc <showText+0x29c>
		  case 'z': memcpy(&pixeldata[x], &charTemplate[25], sizeof(pixeldata[x]) ); break;
		  case ' ': memcpy(&pixeldata[x], &charTemplate[26], sizeof(pixeldata[x]) ); break;
  1804c8:	100d883a 	mov	r6,r2
  1804cc:	00000106 	br	1804d4 <showText+0x294>
		  default: memcpy(&pixeldata[x], &charTemplate[26], sizeof(pixeldata[x]) );
  1804d0:	01800804 	movi	r6,32
  1804d4:	01400634 	movhi	r5,24
  1804d8:	2946b404 	addi	r5,r5,6864
  1804dc:	1809883a 	mov	r4,r3
  1804e0:	01808900 	call	180890 <memcpy>
  1804e4:	84000044 	addi	r16,r16,1
  1804e8:	10c00804 	addi	r3,r2,32
		}


void showText(char *chars){
	int pixeldata[35][8];
	for(int x = 0; x < 35; x++){
  1804ec:	847f5b1e 	bne	r16,r17,18025c <showText+0x1c>
		  default: memcpy(&pixeldata[x], &charTemplate[26], sizeof(pixeldata[x]) );

		 }
	}

	drawChars(pixeldata);
  1804f0:	d809883a 	mov	r4,sp
  1804f4:	01801a00 	call	1801a0 <drawChars>
}
  1804f8:	dfc11a17 	ldw	ra,1128(sp)
  1804fc:	dc411917 	ldw	r17,1124(sp)
  180500:	dc011817 	ldw	r16,1120(sp)
  180504:	dec11b04 	addi	sp,sp,1132
  180508:	f800283a 	ret

0018050c <callback>:
	}

	return 0;
}

void callback(unsigned char *data){
  18050c:	defffe04 	addi	sp,sp,-8
  180510:	dc000015 	stw	r16,0(sp)
	alt_printf( "Responds: %s\n", data + 16);
  180514:	24000404 	addi	r16,r4,16
  180518:	01000634 	movhi	r4,24
  18051c:	800b883a 	mov	r5,r16
  180520:	2105a104 	addi	r4,r4,5764
	}

	return 0;
}

void callback(unsigned char *data){
  180524:	dfc00115 	stw	ra,4(sp)
	alt_printf( "Responds: %s\n", data + 16);
  180528:	01809e00 	call	1809e0 <alt_printf>
	showText(data + 16);
  18052c:	8009883a 	mov	r4,r16
}
  180530:	dfc00117 	ldw	ra,4(sp)
  180534:	dc000017 	ldw	r16,0(sp)
  180538:	dec00204 	addi	sp,sp,8
	return 0;
}

void callback(unsigned char *data){
	alt_printf( "Responds: %s\n", data + 16);
	showText(data + 16);
  18053c:	01802401 	jmpi	180240 <showText>

00180540 <main>:
	}

	drawChars(pixeldata);
}

int main(void){
  180540:	deffff04 	addi	sp,sp,-4
  180544:	dfc00015 	stw	ra,0(sp)
	setup();
  180548:	01806640 	call	180664 <setup>
	showText("please scan a barcode");
  18054c:	01000634 	movhi	r4,24
  180550:	21059a04 	addi	r4,r4,5736
  180554:	01802400 	call	180240 <showText>

	while(1){
		usleep(2000000);
  180558:	010007f4 	movhi	r4,31
  18055c:	21212004 	addi	r4,r4,-31616
  180560:	0180b980 	call	180b98 <usleep>
		tx_ethernet_isr("69");
  180564:	01000634 	movhi	r4,24
  180568:	2105a004 	addi	r4,r4,5760
  18056c:	01807dc0 	call	1807dc <tx_ethernet_isr>
  180570:	003ff906 	br	180558 <main+0x18>

00180574 <rx_ethernet_isr>:
	//while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)

}

void rx_ethernet_isr (void *context)
{
  180574:	defffa04 	addi	sp,sp,-24
  180578:	dfc00515 	stw	ra,20(sp)
  18057c:	dc000415 	stw	r16,16(sp)
	int i;

		// Wait until receive descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
  180580:	01000074 	movhi	r4,1
  180584:	21200804 	addi	r4,r4,-32736
  180588:	0180dc40 	call	180dc4 <alt_avalon_sgdma_check_descriptor_status>
  18058c:	103ffc1e 	bne	r2,zero,180580 <rx_ethernet_isr+0xc>
  180590:	0021883a 	mov	r16,zero
			;

		// Clear input line before writing
		for (i = 0; i < (6 + text_length); i++) {
  180594:	d0a1fb17 	ldw	r2,-30740(gp)
  180598:	10800184 	addi	r2,r2,6
  18059c:	8080062e 	bgeu	r16,r2,1805b8 <rx_ethernet_isr+0x44>
			alt_printf( "%c", 0x08 );		 // 0x08 --> backspace
  1805a0:	01000634 	movhi	r4,24
  1805a4:	01400204 	movi	r5,8
  1805a8:	2105a504 	addi	r4,r4,5780
  1805ac:	01809e00 	call	1809e0 <alt_printf>
		// Wait until receive descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
			;

		// Clear input line before writing
		for (i = 0; i < (6 + text_length); i++) {
  1805b0:	84000044 	addi	r16,r16,1
  1805b4:	003ff706 	br	180594 <rx_ethernet_isr+0x20>
			alt_printf( "%c", 0x08 );		 // 0x08 --> backspace
		}
		//alt_printf( "got: %s\n", rx_frame + 16);
		if(rx_frame[2] == 0x69){
  1805b8:	04000634 	movhi	r16,24
  1805bc:	8409d604 	addi	r16,r16,10072
  1805c0:	80c00083 	ldbu	r3,2(r16)
  1805c4:	00801a44 	movi	r2,105
  1805c8:	1880021e 	bne	r3,r2,1805d4 <rx_ethernet_isr+0x60>

			callback(rx_frame);
  1805cc:	8009883a 	mov	r4,r16
  1805d0:	018050c0 	call	18050c <callback>
		}

		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
  1805d4:	00800044 	movi	r2,1
  1805d8:	01800634 	movhi	r6,24
  1805dc:	01400074 	movhi	r5,1
  1805e0:	01000074 	movhi	r4,1
  1805e4:	d8800215 	stw	r2,8(sp)
  1805e8:	d8800115 	stw	r2,4(sp)
  1805ec:	01c00f84 	movi	r7,62
  1805f0:	3186bc04 	addi	r6,r6,6896
  1805f4:	29601004 	addi	r5,r5,-32704
  1805f8:	21201804 	addi	r4,r4,-32672
  1805fc:	d8000315 	stw	zero,12(sp)
  180600:	d8000015 	stw	zero,0(sp)
  180604:	01810e00 	call	1810e0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		// Create new receive sgdma descriptor
		alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
  180608:	01800634 	movhi	r6,24
  18060c:	01400074 	movhi	r5,1
  180610:	01000074 	movhi	r4,1
  180614:	000f883a 	mov	r7,zero
  180618:	3189d604 	addi	r6,r6,10072
  18061c:	29600004 	addi	r5,r5,-32768
  180620:	21200804 	addi	r4,r4,-32736
  180624:	d8000015 	stw	zero,0(sp)
  180628:	01810680 	call	181068 <alt_avalon_sgdma_construct_stream_to_mem_desc>


		// Set up non-blocking transfer of sgdma receive descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
  18062c:	d121fc17 	ldw	r4,-30736(gp)
  180630:	01400074 	movhi	r5,1
  180634:	29600804 	addi	r5,r5,-32736
  180638:	0180c840 	call	180c84 <alt_avalon_sgdma_do_async_transfer>

		// Output received text
			for(int x = 0; x < 1024; x++){
  18063c:	0005883a 	mov	r2,zero
  180640:	00c10004 	movi	r3,1024
						rx_frame[x] = 0;
  180644:	1409883a 	add	r4,r2,r16
  180648:	20000005 	stb	zero,0(r4)

		// Set up non-blocking transfer of sgdma receive descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );

		// Output received text
			for(int x = 0; x < 1024; x++){
  18064c:	10800044 	addi	r2,r2,1
  180650:	10fffc1e 	bne	r2,r3,180644 <rx_ethernet_isr+0xd0>
						rx_frame[x] = 0;
			}
}
  180654:	dfc00517 	ldw	ra,20(sp)
  180658:	dc000417 	ldw	r16,16(sp)
  18065c:	dec00604 	addi	sp,sp,24
  180660:	f800283a 	ret

00180664 <setup>:
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

void setup(void)
{
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
  180664:	01000634 	movhi	r4,24

alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

void setup(void)
{
  180668:	defffe04 	addi	sp,sp,-8
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
  18066c:	2105a604 	addi	r4,r4,5784

alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));

void setup(void)
{
  180670:	dfc00115 	stw	ra,4(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
  180674:	0180df00 	call	180df0 <alt_avalon_sgdma_open>
  180678:	d0a1fa15 	stw	r2,-30744(gp)
	if (sgdma_tx_dev == NULL) {
  18067c:	1000031e 	bne	r2,zero,18068c <setup+0x28>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
  180680:	01000634 	movhi	r4,24
  180684:	2105aa04 	addi	r4,r4,5800
  180688:	00000206 	br	180694 <setup+0x30>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
  18068c:	01000634 	movhi	r4,24
  180690:	2105b904 	addi	r4,r4,5860
  180694:	01809e00 	call	1809e0 <alt_printf>

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
  180698:	01000634 	movhi	r4,24
  18069c:	2105c404 	addi	r4,r4,5904
  1806a0:	0180df00 	call	180df0 <alt_avalon_sgdma_open>
  1806a4:	d0a1fc15 	stw	r2,-30736(gp)
	if (sgdma_rx_dev == NULL) {
  1806a8:	1000031e 	bne	r2,zero,1806b8 <setup+0x54>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
  1806ac:	01000634 	movhi	r4,24
  1806b0:	2105c804 	addi	r4,r4,5920
  1806b4:	00000206 	br	1806c0 <setup+0x5c>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
  1806b8:	01000634 	movhi	r4,24
  1806bc:	2105d704 	addi	r4,r4,5980
  1806c0:	01809e00 	call	1809e0 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
  1806c4:	d121fc17 	ldw	r4,-30736(gp)
  1806c8:	01400634 	movhi	r5,24
  1806cc:	000f883a 	mov	r7,zero
  1806d0:	01800504 	movi	r6,20
  1806d4:	29415d04 	addi	r5,r5,1396
  1806d8:	0180d800 	call	180d80 <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
  1806dc:	01800634 	movhi	r6,24
  1806e0:	01400074 	movhi	r5,1
  1806e4:	01000074 	movhi	r4,1
  1806e8:	000f883a 	mov	r7,zero
  1806ec:	3189d604 	addi	r6,r6,10072
  1806f0:	29600004 	addi	r5,r5,-32768
  1806f4:	21200804 	addi	r4,r4,-32736
  1806f8:	d8000015 	stw	zero,0(sp)
  1806fc:	01810680 	call	181068 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
  180700:	d121fc17 	ldw	r4,-30736(gp)
  180704:	01400074 	movhi	r5,1
  180708:	29600804 	addi	r5,r5,-32736
  18070c:	0180c840 	call	180c84 <alt_avalon_sgdma_do_async_transfer>

	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) ETH_TSE_BASE;

	// Initialize the MAC address
	*(tse + 3) = 0x116E6001;
  180710:	00800434 	movhi	r2,16
  180714:	00c45bb4 	movhi	r3,4462
  180718:	18d80044 	addi	r3,r3,24577
  18071c:	10880304 	addi	r2,r2,8204
  180720:	10c00015 	stw	r3,0(r2)
	*(tse + 4) = 0x00000F02;
  180724:	00800434 	movhi	r2,16
  180728:	00c3c084 	movi	r3,3842
  18072c:	10880404 	addi	r2,r2,8208
  180730:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
  180734:	00800434 	movhi	r2,16
  180738:	00c00404 	movi	r3,16
  18073c:	10880f04 	addi	r2,r2,8252
  180740:	10c00015 	stw	r3,0(r2)
	*(tse + 0x10) = 0x11;
  180744:	00800434 	movhi	r2,16
  180748:	00c00444 	movi	r3,17
  18074c:	10881004 	addi	r2,r2,8256
  180750:	10c00015 	stw	r3,0(r2)

	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x4000;
  180754:	00800434 	movhi	r2,16
  180758:	00d00004 	movi	r3,16384
  18075c:	10889404 	addi	r2,r2,8784
  180760:	10c00015 	stw	r3,0(r2)

	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
  180764:	00c00434 	movhi	r3,16
  180768:	18c8b004 	addi	r3,r3,8896
  18076c:	18800017 	ldw	r2,0(r3)
  180770:	10801814 	ori	r2,r2,96
  180774:	18800015 	stw	r2,0(r3)

	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
  180778:	00c00434 	movhi	r3,16
  18077c:	18c8b404 	addi	r3,r3,8912
  180780:	18800017 	ldw	r2,0(r3)
  180784:	10802094 	ori	r2,r2,130
  180788:	18800015 	stw	r2,0(r3)

	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
  18078c:	00800434 	movhi	r2,16
  180790:	1088a004 	addi	r2,r2,8832
  180794:	10c00017 	ldw	r3,0(r2)
  180798:	18e00014 	ori	r3,r3,32768
  18079c:	10c00015 	stw	r3,0(r2)

	while ( *(tse + 0xA0) & 0x8000 );
  1807a0:	10c00017 	ldw	r3,0(r2)
  1807a4:	18e0000c 	andi	r3,r3,32768
  1807a8:	183ffd1e 	bne	r3,zero,1807a0 <setup+0x13c>
	alt_printf("help");
  1807ac:	01000634 	movhi	r4,24
  1807b0:	2105e204 	addi	r4,r4,6024
  1807b4:	01809e00 	call	1809e0 <alt_printf>

	// Enable read and write transfers, 100 mbit Ethernet operation, and CRC forwarding
	//*(tse + 2) = *(tse + 2) | 0x00000043;

	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	*(tse + 2) = *(tse + 2) | 0x0000004B;
  1807b8:	00c00434 	movhi	r3,16
  1807bc:	18c80204 	addi	r3,r3,8200
  1807c0:	18800017 	ldw	r2,0(r3)
  1807c4:	108012d4 	ori	r2,r2,75
  1807c8:	18800015 	stw	r2,0(r3)
}
  1807cc:	dfc00117 	ldw	ra,4(sp)
  1807d0:	dec00204 	addi	sp,sp,8
  1807d4:	f800283a 	ret

001807d8 <refresh_ethernet>:

void refresh_ethernet(){
  1807d8:	f800283a 	ret

001807dc <tx_ethernet_isr>:
			for(int x = 0; x < 1024; x++){
						rx_frame[x] = 0;
			}
}

void tx_ethernet_isr(char *chars){
  1807dc:	defff804 	addi	sp,sp,-32
  1807e0:	dc800615 	stw	r18,24(sp)
  1807e4:	04800634 	movhi	r18,24
  1807e8:	dc400515 	stw	r17,20(sp)
  1807ec:	dc000415 	stw	r16,16(sp)
  1807f0:	dfc00715 	stw	ra,28(sp)
  1807f4:	2023883a 	mov	r17,r4
  1807f8:	9486c004 	addi	r18,r18,6912
			for(int x = 0; x < strlen(chars); x++){
  1807fc:	2021883a 	mov	r16,r4
  180800:	8809883a 	mov	r4,r17
  180804:	01808b80 	call	1808b8 <strlen>
  180808:	8447c83a 	sub	r3,r16,r17
  18080c:	1880052e 	bgeu	r3,r2,180824 <tx_ethernet_isr+0x48>
				tx_frame[16 + x] = chars[x];
  180810:	80800003 	ldbu	r2,0(r16)
  180814:	94800044 	addi	r18,r18,1
  180818:	84000044 	addi	r16,r16,1
  18081c:	90bfffc5 	stb	r2,-1(r18)
  180820:	003ff706 	br	180800 <tx_ethernet_isr+0x24>
			}
			// Create transmit sgdma descriptor
			alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame, 62, 0, 1, 1, 0 );
  180824:	00800044 	movi	r2,1
  180828:	01800634 	movhi	r6,24
  18082c:	01400074 	movhi	r5,1
  180830:	01000074 	movhi	r4,1
  180834:	29601004 	addi	r5,r5,-32704
  180838:	21201804 	addi	r4,r4,-32672
  18083c:	d8000315 	stw	zero,12(sp)
  180840:	d8800215 	stw	r2,8(sp)
  180844:	d8800115 	stw	r2,4(sp)
  180848:	d8000015 	stw	zero,0(sp)
  18084c:	01c00f84 	movi	r7,62
  180850:	3186bc04 	addi	r6,r6,6896
  180854:	01810e00 	call	1810e0 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			// Set up non-blocking transfer of sgdma transmit descriptor
			alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
  180858:	d121fa17 	ldw	r4,-30744(gp)
  18085c:	01400074 	movhi	r5,1
  180860:	29601804 	addi	r5,r5,-32672
  180864:	0180c840 	call	180c84 <alt_avalon_sgdma_do_async_transfer>
			// Wait until transmit descriptor transfer is complete
			while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
  180868:	01000074 	movhi	r4,1
  18086c:	21201804 	addi	r4,r4,-32672
  180870:	0180dc40 	call	180dc4 <alt_avalon_sgdma_check_descriptor_status>
  180874:	103ffc1e 	bne	r2,zero,180868 <tx_ethernet_isr+0x8c>

}
  180878:	dfc00717 	ldw	ra,28(sp)
  18087c:	dc800617 	ldw	r18,24(sp)
  180880:	dc400517 	ldw	r17,20(sp)
  180884:	dc000417 	ldw	r16,16(sp)
  180888:	dec00804 	addi	sp,sp,32
  18088c:	f800283a 	ret

00180890 <memcpy>:
  180890:	2005883a 	mov	r2,r4
  180894:	2007883a 	mov	r3,r4
  180898:	218d883a 	add	r6,r4,r6
  18089c:	19800526 	beq	r3,r6,1808b4 <memcpy+0x24>
  1808a0:	29000003 	ldbu	r4,0(r5)
  1808a4:	18c00044 	addi	r3,r3,1
  1808a8:	29400044 	addi	r5,r5,1
  1808ac:	193fffc5 	stb	r4,-1(r3)
  1808b0:	003ffa06 	br	18089c <memcpy+0xc>
  1808b4:	f800283a 	ret

001808b8 <strlen>:
  1808b8:	2005883a 	mov	r2,r4
  1808bc:	10c00007 	ldb	r3,0(r2)
  1808c0:	18000226 	beq	r3,zero,1808cc <strlen+0x14>
  1808c4:	10800044 	addi	r2,r2,1
  1808c8:	003ffc06 	br	1808bc <strlen+0x4>
  1808cc:	1105c83a 	sub	r2,r2,r4
  1808d0:	f800283a 	ret

001808d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  1808d4:	deffff04 	addi	sp,sp,-4
  1808d8:	01000634 	movhi	r4,24
  1808dc:	01400634 	movhi	r5,24
  1808e0:	dfc00015 	stw	ra,0(sp)
  1808e4:	2105e404 	addi	r4,r4,6032
  1808e8:	2947d904 	addi	r5,r5,8036

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  1808ec:	2140061e 	bne	r4,r5,180908 <alt_load+0x34>
  1808f0:	01000634 	movhi	r4,24
  1808f4:	01400634 	movhi	r5,24
  1808f8:	21000804 	addi	r4,r4,32
  1808fc:	29400804 	addi	r5,r5,32
  180900:	2140121e 	bne	r4,r5,18094c <alt_load+0x78>
  180904:	00000b06 	br	180934 <alt_load+0x60>
  180908:	00c00634 	movhi	r3,24
  18090c:	18c7d904 	addi	r3,r3,8036
  180910:	1907c83a 	sub	r3,r3,r4
  180914:	0005883a 	mov	r2,zero
  {
    while( to != end )
  180918:	10fff526 	beq	r2,r3,1808f0 <alt_load+0x1c>
    {
      *to++ = *from++;
  18091c:	114f883a 	add	r7,r2,r5
  180920:	39c00017 	ldw	r7,0(r7)
  180924:	110d883a 	add	r6,r2,r4
  180928:	10800104 	addi	r2,r2,4
  18092c:	31c00015 	stw	r7,0(r6)
  180930:	003ff906 	br	180918 <alt_load+0x44>
  180934:	01000634 	movhi	r4,24
  180938:	01400634 	movhi	r5,24
  18093c:	21059a04 	addi	r4,r4,5736
  180940:	29459a04 	addi	r5,r5,5736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  180944:	2140101e 	bne	r4,r5,180988 <alt_load+0xb4>
  180948:	00000b06 	br	180978 <alt_load+0xa4>
  18094c:	00c00634 	movhi	r3,24
  180950:	18c05304 	addi	r3,r3,332
  180954:	1907c83a 	sub	r3,r3,r4
  180958:	0005883a 	mov	r2,zero
  {
    while( to != end )
  18095c:	10fff526 	beq	r2,r3,180934 <alt_load+0x60>
    {
      *to++ = *from++;
  180960:	114f883a 	add	r7,r2,r5
  180964:	39c00017 	ldw	r7,0(r7)
  180968:	110d883a 	add	r6,r2,r4
  18096c:	10800104 	addi	r2,r2,4
  180970:	31c00015 	stw	r7,0(r6)
  180974:	003ff906 	br	18095c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  180978:	01812780 	call	181278 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  18097c:	dfc00017 	ldw	ra,0(sp)
  180980:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  180984:	018135c1 	jmpi	18135c <alt_icache_flush_all>
  180988:	00c00634 	movhi	r3,24
  18098c:	18c5e404 	addi	r3,r3,6032
  180990:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  180994:	0005883a 	mov	r2,zero
  {
    while( to != end )
  180998:	18bff726 	beq	r3,r2,180978 <alt_load+0xa4>
    {
      *to++ = *from++;
  18099c:	114f883a 	add	r7,r2,r5
  1809a0:	39c00017 	ldw	r7,0(r7)
  1809a4:	110d883a 	add	r6,r2,r4
  1809a8:	10800104 	addi	r2,r2,4
  1809ac:	31c00015 	stw	r7,0(r6)
  1809b0:	003ff906 	br	180998 <alt_load+0xc4>

001809b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  1809b4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  1809b8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  1809bc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  1809c0:	0180b9c0 	call	180b9c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  1809c4:	0180bbc0 	call	180bbc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  1809c8:	d1a1fd17 	ldw	r6,-30732(gp)
  1809cc:	d161fe17 	ldw	r5,-30728(gp)
  1809d0:	d121ff17 	ldw	r4,-30724(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  1809d4:	dfc00017 	ldw	ra,0(sp)
  1809d8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  1809dc:	01805401 	jmpi	180540 <main>

001809e0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  1809e0:	defff204 	addi	sp,sp,-56
  1809e4:	2005883a 	mov	r2,r4
  1809e8:	dfc00a15 	stw	ra,40(sp)
  1809ec:	df000915 	stw	fp,36(sp)
  1809f0:	ddc00815 	stw	r23,32(sp)
  1809f4:	dd800715 	stw	r22,28(sp)
  1809f8:	dd400615 	stw	r21,24(sp)
  1809fc:	dd000515 	stw	r20,20(sp)
  180a00:	dcc00415 	stw	r19,16(sp)
  180a04:	dc800315 	stw	r18,12(sp)
  180a08:	dc400215 	stw	r17,8(sp)
  180a0c:	dc000115 	stw	r16,4(sp)
  180a10:	d9400b15 	stw	r5,44(sp)
  180a14:	d9800c15 	stw	r6,48(sp)
  180a18:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  180a1c:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
  180a20:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  180a24:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
  180a28:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  180a2c:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  180a30:	11000007 	ldb	r4,0(r2)
  180a34:	20003a26 	beq	r4,zero,180b20 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  180a38:	24000226 	beq	r4,r16,180a44 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  180a3c:	14400044 	addi	r17,r2,1
  180a40:	00001406 	br	180a94 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  180a44:	14400084 	addi	r17,r2,2
  180a48:	10800047 	ldb	r2,1(r2)
  180a4c:	10003426 	beq	r2,zero,180b20 <alt_printf+0x140>
            {
                if (c == '%')
  180a50:	1400021e 	bne	r2,r16,180a5c <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  180a54:	8009883a 	mov	r4,r16
  180a58:	00000e06 	br	180a94 <alt_printf+0xb4>
                } 
                else if (c == 'c')
  180a5c:	1480051e 	bne	r2,r18,180a74 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
  180a60:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  180a64:	ad800104 	addi	r22,r21,4
  180a68:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
  180a6c:	0180b500 	call	180b50 <alt_putchar>
  180a70:	00002906 	br	180b18 <alt_printf+0x138>
                }
                else if (c == 'x')
  180a74:	14c0201e 	bne	r2,r19,180af8 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  180a78:	adc00017 	ldw	r23,0(r21)
  180a7c:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  180a80:	b8000326 	beq	r23,zero,180a90 <alt_printf+0xb0>
  180a84:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  180a88:	00c003c4 	movi	r3,15
  180a8c:	00000306 	br	180a9c <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
  180a90:	01000c04 	movi	r4,48
  180a94:	0180b500 	call	180b50 <alt_putchar>
                        continue;
  180a98:	00001f06 	br	180b18 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  180a9c:	1d84983a 	sll	r2,r3,r22
  180aa0:	15c4703a 	and	r2,r2,r23
  180aa4:	1000021e 	bne	r2,zero,180ab0 <alt_printf+0xd0>
                        digit_shift -= 4;
  180aa8:	b5bfff04 	addi	r22,r22,-4
  180aac:	003ffb06 	br	180a9c <alt_printf+0xbc>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  180ab0:	070003c4 	movi	fp,15
                        if (digit <= 9)
  180ab4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  180ab8:	b0001716 	blt	r22,zero,180b18 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  180abc:	e588983a 	sll	r4,fp,r22
  180ac0:	25c8703a 	and	r4,r4,r23
  180ac4:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
  180ac8:	19000236 	bltu	r3,r4,180ad4 <alt_printf+0xf4>
                            c = '0' + digit;
  180acc:	21000c04 	addi	r4,r4,48
  180ad0:	00000106 	br	180ad8 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
  180ad4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
  180ad8:	21003fcc 	andi	r4,r4,255
  180adc:	2100201c 	xori	r4,r4,128
  180ae0:	213fe004 	addi	r4,r4,-128
  180ae4:	d8c00015 	stw	r3,0(sp)
  180ae8:	0180b500 	call	180b50 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  180aec:	b5bfff04 	addi	r22,r22,-4
  180af0:	d8c00017 	ldw	r3,0(sp)
  180af4:	003ff006 	br	180ab8 <alt_printf+0xd8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  180af8:	1500071e 	bne	r2,r20,180b18 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  180afc:	ad800017 	ldw	r22,0(r21)
  180b00:	ad400104 	addi	r21,r21,4

                    while(*s)
  180b04:	b1000007 	ldb	r4,0(r22)
  180b08:	20000326 	beq	r4,zero,180b18 <alt_printf+0x138>
                      alt_putchar(*s++);
  180b0c:	b5800044 	addi	r22,r22,1
  180b10:	0180b500 	call	180b50 <alt_putchar>
  180b14:	003ffb06 	br	180b04 <alt_printf+0x124>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  180b18:	8805883a 	mov	r2,r17
  180b1c:	003fc406 	br	180a30 <alt_printf+0x50>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  180b20:	dfc00a17 	ldw	ra,40(sp)
  180b24:	df000917 	ldw	fp,36(sp)
  180b28:	ddc00817 	ldw	r23,32(sp)
  180b2c:	dd800717 	ldw	r22,28(sp)
  180b30:	dd400617 	ldw	r21,24(sp)
  180b34:	dd000517 	ldw	r20,20(sp)
  180b38:	dcc00417 	ldw	r19,16(sp)
  180b3c:	dc800317 	ldw	r18,12(sp)
  180b40:	dc400217 	ldw	r17,8(sp)
  180b44:	dc000117 	ldw	r16,4(sp)
  180b48:	dec00e04 	addi	sp,sp,56
  180b4c:	f800283a 	ret

00180b50 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  180b50:	defffd04 	addi	sp,sp,-12
  180b54:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  180b58:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  180b5c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  180b60:	01000634 	movhi	r4,24
  180b64:	000f883a 	mov	r7,zero
  180b68:	01800044 	movi	r6,1
  180b6c:	d80b883a 	mov	r5,sp
  180b70:	2107d404 	addi	r4,r4,8016
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  180b74:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  180b78:	0180bf40 	call	180bf4 <altera_avalon_jtag_uart_write>
  180b7c:	00ffffc4 	movi	r3,-1
  180b80:	10c00126 	beq	r2,r3,180b88 <alt_putchar+0x38>
        return -1;
    }
    return c;
  180b84:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
  180b88:	dfc00217 	ldw	ra,8(sp)
  180b8c:	dc000117 	ldw	r16,4(sp)
  180b90:	dec00304 	addi	sp,sp,12
  180b94:	f800283a 	ret

00180b98 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
  180b98:	01811ec1 	jmpi	1811ec <alt_busy_sleep>

00180b9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  180b9c:	deffff04 	addi	sp,sp,-4
  180ba0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
  180ba4:	01814540 	call	181454 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  180ba8:	00800044 	movi	r2,1
  180bac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  180bb0:	dfc00017 	ldw	ra,0(sp)
  180bb4:	dec00104 	addi	sp,sp,4
  180bb8:	f800283a 	ret

00180bbc <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
  180bbc:	01000634 	movhi	r4,24
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  180bc0:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
  180bc4:	000d883a 	mov	r6,zero
  180bc8:	000b883a 	mov	r5,zero
  180bcc:	2107c804 	addi	r4,r4,7968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  180bd0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
  180bd4:	01811680 	call	181168 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
  180bd8:	01000634 	movhi	r4,24
  180bdc:	01800044 	movi	r6,1
  180be0:	000b883a 	mov	r5,zero
  180be4:	2107bc04 	addi	r4,r4,7920
    ALTERA_ETH_TSE_INIT ( ETH_TSE, eth_tse);
}
  180be8:	dfc00017 	ldw	ra,0(sp)
  180bec:	dec00104 	addi	sp,sp,4

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
  180bf0:	01811681 	jmpi	181168 <alt_avalon_sgdma_init>

00180bf4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  180bf4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  180bf8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  180bfc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  180c00:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  180c04:	2980072e 	bgeu	r5,r6,180c24 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  180c08:	38c00037 	ldwio	r3,0(r7)
  180c0c:	18ffffec 	andhi	r3,r3,65535
  180c10:	183ffc26 	beq	r3,zero,180c04 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  180c14:	28c00007 	ldb	r3,0(r5)
  180c18:	20c00035 	stwio	r3,0(r4)
  180c1c:	29400044 	addi	r5,r5,1
  180c20:	003ff806 	br	180c04 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
  180c24:	f800283a 	ret

00180c28 <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  180c28:	20800317 	ldw	r2,12(r4)
  180c2c:	10800404 	addi	r2,r2,16
  180c30:	10c00037 	ldwio	r3,0(r2)
  180c34:	18e00034 	orhi	r3,r3,32768
  180c38:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180c3c:	20800317 	ldw	r2,12(r4)
  180c40:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
  180c44:	20c00917 	ldw	r3,36(r4)
  180c48:	18000d26 	beq	r3,zero,180c80 <alt_avalon_sgdma_irq+0x58>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
  180c4c:	defffe04 	addi	sp,sp,-8
  180c50:	dfc00115 	stw	ra,4(sp)
  180c54:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  180c58:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  180c5c:	00bfff84 	movi	r2,-2
  180c60:	8084703a 	and	r2,r16,r2
  180c64:	1001703a 	wrctl	status,r2
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
  180c68:	21000a17 	ldw	r4,40(r4)
  180c6c:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  180c70:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
  180c74:	dfc00117 	ldw	ra,4(sp)
  180c78:	dc000017 	ldw	r16,0(sp)
  180c7c:	dec00204 	addi	sp,sp,8
  180c80:	f800283a 	ret

00180c84 <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  180c84:	20c00317 	ldw	r3,12(r4)
  180c88:	18800037 	ldwio	r2,0(r3)
  180c8c:	1080040c 	andi	r2,r2,16
  180c90:	1000191e 	bne	r2,zero,180cf8 <alt_avalon_sgdma_do_async_transfer+0x74>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  180c94:	18c00404 	addi	r3,r3,16
  180c98:	19c00037 	ldwio	r7,0(r3)
  180c9c:	01bff7c4 	movi	r6,-33
  180ca0:	398c703a 	and	r6,r7,r6
  180ca4:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  180ca8:	20c00317 	ldw	r3,12(r4)
  180cac:	01803fc4 	movi	r6,255
  180cb0:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  180cb4:	20c00317 	ldw	r3,12(r4)
  180cb8:	19400835 	stwio	r5,32(r3)
  180cbc:	20c00317 	ldw	r3,12(r4)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
  180cc0:	21400917 	ldw	r5,36(r4)
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180cc4:	18c00404 	addi	r3,r3,16
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
  180cc8:	28000526 	beq	r5,zero,180ce0 <alt_avalon_sgdma_do_async_transfer+0x5c>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180ccc:	19400037 	ldwio	r5,0(r3)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180cd0:	21000b17 	ldw	r4,44(r4)
  180cd4:	21001814 	ori	r4,r4,96
  180cd8:	2148b03a 	or	r4,r4,r5
  180cdc:	00000406 	br	180cf0 <alt_avalon_sgdma_do_async_transfer+0x6c>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180ce0:	19400037 	ldwio	r5,0(r3)
  180ce4:	013ffbc4 	movi	r4,-17
  180ce8:	2908703a 	and	r4,r5,r4

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180cec:	21001814 	ori	r4,r4,96
  180cf0:	19000035 	stwio	r4,0(r3)
  180cf4:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  180cf8:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
  180cfc:	f800283a 	ret

00180d00 <alt_avalon_sgdma_do_sync_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  180d00:	20c00317 	ldw	r3,12(r4)
  180d04:	18800037 	ldwio	r2,0(r3)
  180d08:	1080040c 	andi	r2,r2,16
  180d0c:	103ffc1e 	bne	r2,zero,180d00 <alt_avalon_sgdma_do_sync_transfer>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  180d10:	18c00404 	addi	r3,r3,16
  180d14:	19800037 	ldwio	r6,0(r3)
  180d18:	00bff7c4 	movi	r2,-33
  180d1c:	308c703a 	and	r6,r6,r2
  180d20:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  180d24:	20c00317 	ldw	r3,12(r4)
  180d28:	01803fc4 	movi	r6,255
  180d2c:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  180d30:	20c00317 	ldw	r3,12(r4)
  180d34:	19400835 	stwio	r5,32(r3)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  180d38:	20c00317 	ldw	r3,12(r4)
  180d3c:	18c00404 	addi	r3,r3,16
  180d40:	19400037 	ldwio	r5,0(r3)
  180d44:	29401814 	ori	r5,r5,96
  180d48:	19400035 	stwio	r5,0(r3)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  180d4c:	20c00317 	ldw	r3,12(r4)
  180d50:	19400037 	ldwio	r5,0(r3)
  180d54:	2940040c 	andi	r5,r5,16
  180d58:	283ffc1e 	bne	r5,zero,180d4c <alt_avalon_sgdma_do_sync_transfer+0x4c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  180d5c:	18c00404 	addi	r3,r3,16
  180d60:	19400037 	ldwio	r5,0(r3)
  180d64:	2884703a 	and	r2,r5,r2
  180d68:	18800035 	stwio	r2,0(r3)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
  180d6c:	20c00317 	ldw	r3,12(r4)
  180d70:	18800037 	ldwio	r2,0(r3)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  180d74:	01003fc4 	movi	r4,255
  180d78:	19000035 	stwio	r4,0(r3)

  return status;
}
  180d7c:	f800283a 	ret

00180d80 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
  180d80:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
  180d84:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
  180d88:	21800b15 	stw	r6,44(r4)
  180d8c:	f800283a 	ret

00180d90 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180d90:	20800317 	ldw	r2,12(r4)
  180d94:	10800404 	addi	r2,r2,16
  180d98:	10c00037 	ldwio	r3,0(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180d9c:	18c00814 	ori	r3,r3,32
  180da0:	10c00035 	stwio	r3,0(r2)
  180da4:	f800283a 	ret

00180da8 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180da8:	20800317 	ldw	r2,12(r4)
  180dac:	10800404 	addi	r2,r2,16
  180db0:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180db4:	00fff7c4 	movi	r3,-33
  180db8:	20c6703a 	and	r3,r4,r3
  180dbc:	10c00035 	stwio	r3,0(r2)
  180dc0:	f800283a 	ret

00180dc4 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
  180dc4:	208007a3 	ldbuio	r2,30(r4)
  180dc8:	10801fcc 	andi	r2,r2,127
  180dcc:	1000041e 	bne	r2,zero,180de0 <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
  180dd0:	208007e3 	ldbuio	r2,31(r4)
  180dd4:	1080200c 	andi	r2,r2,128
  180dd8:	1000031e 	bne	r2,zero,180de8 <alt_avalon_sgdma_check_descriptor_status+0x24>
  180ddc:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  180de0:	00bffec4 	movi	r2,-5
  180de4:	f800283a 	ret
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  180de8:	00bfe244 	movi	r2,-119
  }

    return 0;
}
  180dec:	f800283a 	ret

00180df0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
  180df0:	defffe04 	addi	sp,sp,-8
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
  180df4:	d1600104 	addi	r5,gp,-32764
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
  180df8:	dc000015 	stw	r16,0(sp)
  180dfc:	dfc00115 	stw	ra,4(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
  180e00:	01812e80 	call	1812e8 <alt_find_dev>
  180e04:	1021883a 	mov	r16,r2

  if (NULL == dev) {
  180e08:	1000071e 	bne	r2,zero,180e28 <alt_avalon_sgdma_open+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  180e0c:	d0a00317 	ldw	r2,-32756(gp)
  180e10:	10000226 	beq	r2,zero,180e1c <alt_avalon_sgdma_open+0x2c>
  180e14:	103ee83a 	callr	r2
  180e18:	00000106 	br	180e20 <alt_avalon_sgdma_open+0x30>
  180e1c:	d0a20104 	addi	r2,gp,-30716
    ALT_ERRNO = ENODEV;
  180e20:	00c004c4 	movi	r3,19
  180e24:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
  180e28:	8005883a 	mov	r2,r16
  180e2c:	dfc00117 	ldw	ra,4(sp)
  180e30:	dc000017 	ldw	r16,0(sp)
  180e34:	dec00204 	addi	sp,sp,8
  180e38:	f800283a 	ret

00180e3c <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180e3c:	20c00317 	ldw	r3,12(r4)
  180e40:	18c00404 	addi	r3,r3,16
  180e44:	19000037 	ldwio	r4,0(r3)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  180e48:	00a00434 	movhi	r2,32784
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180e4c:	280a953a 	slli	r5,r5,20
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  180e50:	10bfffc4 	addi	r2,r2,-1
  180e54:	2084703a 	and	r2,r4,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180e58:	295ffc2c 	andhi	r5,r5,32752
  180e5c:	29400134 	orhi	r5,r5,4
  180e60:	288ab03a 	or	r5,r5,r2
  180e64:	19400035 	stwio	r5,0(r3)
  180e68:	f800283a 	ret

00180e6c <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  180e6c:	20800317 	ldw	r2,12(r4)
  180e70:	10800404 	addi	r2,r2,16
  180e74:	11000037 	ldwio	r4,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  180e78:	00ffff34 	movhi	r3,65532
  180e7c:	18ffffc4 	addi	r3,r3,-1
  180e80:	20c6703a 	and	r3,r4,r3
  180e84:	10c00035 	stwio	r3,0(r2)
  180e88:	f800283a 	ret

00180e8c <alt_avalon_sgdma_construct_descriptor_burst>:
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
  180e8c:	288007c3 	ldbu	r2,31(r5)
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
  180e90:	d8c00617 	ldw	r3,24(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
  180e94:	10801fcc 	andi	r2,r2,127
  180e98:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  180e9c:	3004d23a 	srli	r2,r6,8
  180ea0:	21800005 	stb	r6,0(r4)
  desc->write_addr               = write_addr;
  180ea4:	21c00205 	stb	r7,8(r4)
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  180ea8:	20800045 	stb	r2,1(r4)
  180eac:	3004d43a 	srli	r2,r6,16
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  180eb0:	21400405 	stb	r5,16(r4)
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  180eb4:	300cd63a 	srli	r6,r6,24
  180eb8:	20800085 	stb	r2,2(r4)
  desc->write_addr               = write_addr;
  180ebc:	3804d23a 	srli	r2,r7,8
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  180ec0:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  180ec4:	20000105 	stb	zero,4(r4)
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  180ec8:	20800245 	stb	r2,9(r4)
  180ecc:	3804d43a 	srli	r2,r7,16
  180ed0:	380ed63a 	srli	r7,r7,24
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  180ed4:	20000145 	stb	zero,5(r4)
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  180ed8:	20800285 	stb	r2,10(r4)
  desc->next                     = (alt_u32 *) next;
  180edc:	2804d23a 	srli	r2,r5,8
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  180ee0:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  180ee4:	20000185 	stb	zero,6(r4)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  180ee8:	20800445 	stb	r2,17(r4)
  180eec:	2804d43a 	srli	r2,r5,16
  180ef0:	280ad63a 	srli	r5,r5,24
  desc->read_addr_pad            = 0x0;
  180ef4:	200001c5 	stb	zero,7(r4)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  180ef8:	20800485 	stb	r2,18(r4)
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  180efc:	d880000b 	ldhu	r2,0(sp)
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  180f00:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  180f04:	20000305 	stb	zero,12(r4)
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  180f08:	20800605 	stb	r2,24(r4)
  180f0c:	1004d23a 	srli	r2,r2,8

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  180f10:	20000345 	stb	zero,13(r4)
  180f14:	20000385 	stb	zero,14(r4)
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  180f18:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
  desc->status                   = 0x0;

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  180f1c:	d8800417 	ldw	r2,16(sp)

  desc->read_addr                = read_addr;
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  180f20:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
  180f24:	20000505 	stb	zero,20(r4)
  180f28:	20000545 	stb	zero,21(r4)
  180f2c:	20000585 	stb	zero,22(r4)
  180f30:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
  desc->actual_bytes_transferred = 0;
  180f34:	20000705 	stb	zero,28(r4)
  180f38:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
  180f3c:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  180f40:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
  180f44:	d8800517 	ldw	r2,20(sp)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  180f48:	d9400117 	ldw	r5,4(sp)
  desc->actual_bytes_transferred = 0;
  desc->status                   = 0x0;

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  desc->write_burst              = write_burst;
  180f4c:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  180f50:	d8800217 	ldw	r2,8(sp)
  180f54:	280ac03a 	cmpne	r5,r5,zero
  180f58:	297fe004 	addi	r5,r5,-128
  180f5c:	1004c03a 	cmpne	r2,r2,zero
  180f60:	1004907a 	slli	r2,r2,1
  180f64:	2884b03a 	or	r2,r5,r2
  180f68:	d9400317 	ldw	r5,12(sp)
  180f6c:	280ac03a 	cmpne	r5,r5,zero
  180f70:	280a90ba 	slli	r5,r5,2
  180f74:	114ab03a 	or	r5,r2,r5
  180f78:	18803fcc 	andi	r2,r3,255
  180f7c:	10000326 	beq	r2,zero,180f8c <alt_avalon_sgdma_construct_descriptor_burst+0x100>
  180f80:	18c003cc 	andi	r3,r3,15
  180f84:	180490fa 	slli	r2,r3,3
  180f88:	00000106 	br	180f90 <alt_avalon_sgdma_construct_descriptor_burst+0x104>
  180f8c:	0005883a 	mov	r2,zero
  180f90:	2884b03a 	or	r2,r5,r2
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
  180f94:	01400804 	movi	r5,32
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  180f98:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
  180f9c:	01812741 	jmpi	181274 <alt_dcache_flush>

00180fa0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  180fa0:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  180fa4:	d8800c17 	ldw	r2,48(sp)
  180fa8:	d8000615 	stw	zero,24(sp)
  180fac:	d8000115 	stw	zero,4(sp)
  180fb0:	d8800515 	stw	r2,20(sp)
  180fb4:	d8800b17 	ldw	r2,44(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  180fb8:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  180fbc:	d8800415 	stw	r2,16(sp)
  180fc0:	d8800a17 	ldw	r2,40(sp)
  180fc4:	d8800315 	stw	r2,12(sp)
  180fc8:	d8800917 	ldw	r2,36(sp)
  180fcc:	d8800215 	stw	r2,8(sp)
  180fd0:	d880080b 	ldhu	r2,32(sp)
  180fd4:	d8800015 	stw	r2,0(sp)
  180fd8:	0180e8c0 	call	180e8c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
  180fdc:	dfc00717 	ldw	ra,28(sp)
  180fe0:	dec00804 	addi	sp,sp,32
  180fe4:	f800283a 	ret

00180fe8 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
  180fe8:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
  180fec:	d8800817 	ldw	r2,32(sp)
  180ff0:	d8000415 	stw	zero,16(sp)
  180ff4:	d8000315 	stw	zero,12(sp)
  180ff8:	d8800215 	stw	r2,8(sp)
  180ffc:	d8800717 	ldw	r2,28(sp)
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
  181000:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
  181004:	d8800115 	stw	r2,4(sp)
  181008:	d880060b 	ldhu	r2,24(sp)
  18100c:	d8800015 	stw	r2,0(sp)
  181010:	0180fa00 	call	180fa0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
  181014:	dfc00517 	ldw	ra,20(sp)
  181018:	dec00604 	addi	sp,sp,24
  18101c:	f800283a 	ret

00181020 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  181020:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  181024:	d8800917 	ldw	r2,36(sp)
  181028:	39ffffcc 	andi	r7,r7,65535
  18102c:	d9c00015 	stw	r7,0(sp)
  181030:	d8800515 	stw	r2,20(sp)
  181034:	d8800817 	ldw	r2,32(sp)
  181038:	300f883a 	mov	r7,r6
  18103c:	d8000615 	stw	zero,24(sp)
  181040:	d8000415 	stw	zero,16(sp)
  181044:	d8800315 	stw	r2,12(sp)
  181048:	d8000215 	stw	zero,8(sp)
  18104c:	d8000115 	stw	zero,4(sp)
  181050:	000d883a 	mov	r6,zero
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  181054:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  181058:	0180e8c0 	call	180e8c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
  18105c:	dfc00717 	ldw	ra,28(sp)
  181060:	dec00804 	addi	sp,sp,32
  181064:	f800283a 	ret

00181068 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  181068:	defffd04 	addi	sp,sp,-12
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
  18106c:	d8800317 	ldw	r2,12(sp)
  181070:	d8000115 	stw	zero,4(sp)
  181074:	39ffffcc 	andi	r7,r7,65535
  181078:	d8800015 	stw	r2,0(sp)
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  18107c:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
  181080:	01810200 	call	181020 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
  181084:	dfc00217 	ldw	ra,8(sp)
  181088:	dec00304 	addi	sp,sp,12
  18108c:	f800283a 	ret

00181090 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  181090:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  181094:	d8800c03 	ldbu	r2,48(sp)
  181098:	39ffffcc 	andi	r7,r7,65535
  18109c:	d9c00015 	stw	r7,0(sp)
  1810a0:	d8800615 	stw	r2,24(sp)
  1810a4:	d8800b17 	ldw	r2,44(sp)
  1810a8:	d8000515 	stw	zero,20(sp)
  1810ac:	000f883a 	mov	r7,zero
  1810b0:	d8800415 	stw	r2,16(sp)
  1810b4:	d8800917 	ldw	r2,36(sp)
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  1810b8:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  1810bc:	d8800315 	stw	r2,12(sp)
  1810c0:	d8800817 	ldw	r2,32(sp)
  1810c4:	d8800215 	stw	r2,8(sp)
  1810c8:	d8800a17 	ldw	r2,40(sp)
  1810cc:	d8800115 	stw	r2,4(sp)
  1810d0:	0180e8c0 	call	180e8c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
  1810d4:	dfc00717 	ldw	ra,28(sp)
  1810d8:	dec00804 	addi	sp,sp,32
  1810dc:	f800283a 	ret

001810e0 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
  1810e0:	defffa04 	addi	sp,sp,-24
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
  1810e4:	d8800903 	ldbu	r2,36(sp)
  1810e8:	d8000315 	stw	zero,12(sp)
  1810ec:	39ffffcc 	andi	r7,r7,65535
  1810f0:	d8800415 	stw	r2,16(sp)
  1810f4:	d8800817 	ldw	r2,32(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
  1810f8:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
  1810fc:	d8800215 	stw	r2,8(sp)
  181100:	d8800717 	ldw	r2,28(sp)
  181104:	d8800115 	stw	r2,4(sp)
  181108:	d8800617 	ldw	r2,24(sp)
  18110c:	d8800015 	stw	r2,0(sp)
  181110:	01810900 	call	181090 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
  181114:	dfc00517 	ldw	ra,20(sp)
  181118:	dec00604 	addi	sp,sp,24
  18111c:	f800283a 	ret

00181120 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
  181120:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
  181124:	d8800c03 	ldbu	r2,48(sp)
  181128:	d8000515 	stw	zero,20(sp)
  18112c:	d8000415 	stw	zero,16(sp)
  181130:	d8800615 	stw	r2,24(sp)
  181134:	d8800b17 	ldw	r2,44(sp)
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
  181138:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
  18113c:	d8800315 	stw	r2,12(sp)
  181140:	d8800a17 	ldw	r2,40(sp)
  181144:	d8800215 	stw	r2,8(sp)
  181148:	d8800917 	ldw	r2,36(sp)
  18114c:	d8800115 	stw	r2,4(sp)
  181150:	d880080b 	ldhu	r2,32(sp)
  181154:	d8800015 	stw	r2,0(sp)
  181158:	0180e8c0 	call	180e8c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
  18115c:	dfc00717 	ldw	ra,28(sp)
  181160:	dec00804 	addi	sp,sp,32
  181164:	f800283a 	ret

00181168 <alt_avalon_sgdma_init>:

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  181168:	20c00317 	ldw	r3,12(r4)
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
  18116c:	defffb04 	addi	sp,sp,-20
  181170:	dc800315 	stw	r18,12(sp)
  181174:	dc400215 	stw	r17,8(sp)
  181178:	dc000115 	stw	r16,4(sp)
  18117c:	dfc00415 	stw	ra,16(sp)
  181180:	2021883a 	mov	r16,r4
  181184:	2823883a 	mov	r17,r5
  181188:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  18118c:	00800074 	movhi	r2,1
  181190:	18800435 	stwio	r2,16(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  181194:	20c00317 	ldw	r3,12(r4)
  181198:	18800435 	stwio	r2,16(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
  18119c:	20800317 	ldw	r2,12(r4)
  1811a0:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  1811a4:	20800317 	ldw	r2,12(r4)
  1811a8:	00c03fc4 	movi	r3,255
  1811ac:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
  1811b0:	d1600104 	addi	r5,gp,-32764
  1811b4:	018127c0 	call	18127c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
  1811b8:	01800634 	movhi	r6,24
  1811bc:	d8000015 	stw	zero,0(sp)
  1811c0:	800f883a 	mov	r7,r16
  1811c4:	31830a04 	addi	r6,r6,3112
  1811c8:	900b883a 	mov	r5,r18
  1811cc:	8809883a 	mov	r4,r17
  1811d0:	01813600 	call	181360 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
  1811d4:	dfc00417 	ldw	ra,16(sp)
  1811d8:	dc800317 	ldw	r18,12(sp)
  1811dc:	dc400217 	ldw	r17,8(sp)
  1811e0:	dc000117 	ldw	r16,4(sp)
  1811e4:	dec00504 	addi	sp,sp,20
  1811e8:	f800283a 	ret

001811ec <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  1811ec:	0142e8f4 	movhi	r5,2979
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  1811f0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  1811f4:	297a2e84 	addi	r5,r5,-5958
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  1811f8:	dc000015 	stw	r16,0(sp)
  1811fc:	dfc00115 	stw	ra,4(sp)
  181200:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  181204:	01815840 	call	181584 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  181208:	10001026 	beq	r2,zero,18124c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  18120c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  181210:	013d1774 	movhi	r4,62557
  181214:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  181218:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  18121c:	2105d184 	addi	r4,r4,5958
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  181220:	297fffc4 	addi	r5,r5,-1
  181224:	283ffe1e 	bne	r5,zero,181220 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  181228:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  18122c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  181230:	18bffb16 	blt	r3,r2,181220 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  181234:	014002c4 	movi	r5,11
  181238:	8009883a 	mov	r4,r16
  18123c:	01816400 	call	181640 <__mulsi3>
  181240:	10bfffc4 	addi	r2,r2,-1
  181244:	103ffe1e 	bne	r2,zero,181240 <alt_busy_sleep+0x54>
  181248:	00000506 	br	181260 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  18124c:	014002c4 	movi	r5,11
  181250:	8009883a 	mov	r4,r16
  181254:	01816400 	call	181640 <__mulsi3>
  181258:	10bfffc4 	addi	r2,r2,-1
  18125c:	00bffe16 	blt	zero,r2,181258 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
  181260:	0005883a 	mov	r2,zero
  181264:	dfc00117 	ldw	ra,4(sp)
  181268:	dc000017 	ldw	r16,0(sp)
  18126c:	dec00204 	addi	sp,sp,8
  181270:	f800283a 	ret

00181274 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  181274:	f800283a 	ret

00181278 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  181278:	f800283a 	ret

0018127c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  18127c:	20000226 	beq	r4,zero,181288 <alt_dev_llist_insert+0xc>
  181280:	20800217 	ldw	r2,8(r4)
  181284:	1000101e 	bne	r2,zero,1812c8 <alt_dev_llist_insert+0x4c>
  181288:	d0a00317 	ldw	r2,-32756(gp)
  18128c:	10000926 	beq	r2,zero,1812b4 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  181290:	deffff04 	addi	sp,sp,-4
  181294:	dfc00015 	stw	ra,0(sp)
  181298:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  18129c:	00c00584 	movi	r3,22
  1812a0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  1812a4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  1812a8:	dfc00017 	ldw	ra,0(sp)
  1812ac:	dec00104 	addi	sp,sp,4
  1812b0:	f800283a 	ret
  1812b4:	d0a20104 	addi	r2,gp,-30716
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  1812b8:	00c00584 	movi	r3,22
  1812bc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  1812c0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  1812c4:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  1812c8:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  1812cc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  1812d0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  1812d4:	28800017 	ldw	r2,0(r5)
  1812d8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  1812dc:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  1812e0:	0005883a 	mov	r2,zero
  1812e4:	f800283a 	ret

001812e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  1812e8:	defffb04 	addi	sp,sp,-20
  1812ec:	dcc00315 	stw	r19,12(sp)
  1812f0:	dc800215 	stw	r18,8(sp)
  1812f4:	dc400115 	stw	r17,4(sp)
  1812f8:	dc000015 	stw	r16,0(sp)
  1812fc:	dfc00415 	stw	ra,16(sp)
  181300:	2027883a 	mov	r19,r4
  181304:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  181308:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  18130c:	01808b80 	call	1808b8 <strlen>
  181310:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  181314:	84400726 	beq	r16,r17,181334 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  181318:	81000217 	ldw	r4,8(r16)
  18131c:	900d883a 	mov	r6,r18
  181320:	980b883a 	mov	r5,r19
  181324:	018145c0 	call	18145c <memcmp>
  181328:	10000426 	beq	r2,zero,18133c <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  18132c:	84000017 	ldw	r16,0(r16)
  181330:	003ff806 	br	181314 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
  181334:	0005883a 	mov	r2,zero
  181338:	00000106 	br	181340 <alt_find_dev+0x58>
  18133c:	8005883a 	mov	r2,r16
}
  181340:	dfc00417 	ldw	ra,16(sp)
  181344:	dcc00317 	ldw	r19,12(sp)
  181348:	dc800217 	ldw	r18,8(sp)
  18134c:	dc400117 	ldw	r17,4(sp)
  181350:	dc000017 	ldw	r16,0(sp)
  181354:	dec00504 	addi	sp,sp,20
  181358:	f800283a 	ret

0018135c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  18135c:	f800283a 	ret

00181360 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  181360:	01813ec1 	jmpi	1813ec <alt_iic_isr_register>

00181364 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  181364:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  181368:	00bfff84 	movi	r2,-2
  18136c:	2084703a 	and	r2,r4,r2
  181370:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  181374:	00c00044 	movi	r3,1
  181378:	d0a20017 	ldw	r2,-30720(gp)
  18137c:	194a983a 	sll	r5,r3,r5
  181380:	288ab03a 	or	r5,r5,r2
  181384:	d1620015 	stw	r5,-30720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  181388:	d0a20017 	ldw	r2,-30720(gp)
  18138c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  181390:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  181394:	0005883a 	mov	r2,zero
  181398:	f800283a 	ret

0018139c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  18139c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1813a0:	00bfff84 	movi	r2,-2
  1813a4:	2084703a 	and	r2,r4,r2
  1813a8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  1813ac:	00ffff84 	movi	r3,-2
  1813b0:	d0a20017 	ldw	r2,-30720(gp)
  1813b4:	194a183a 	rol	r5,r3,r5
  1813b8:	288a703a 	and	r5,r5,r2
  1813bc:	d1620015 	stw	r5,-30720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  1813c0:	d0a20017 	ldw	r2,-30720(gp)
  1813c4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1813c8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  1813cc:	0005883a 	mov	r2,zero
  1813d0:	f800283a 	ret

001813d4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  1813d4:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  1813d8:	00800044 	movi	r2,1
  1813dc:	1144983a 	sll	r2,r2,r5
  1813e0:	10c4703a 	and	r2,r2,r3
}
  1813e4:	1004c03a 	cmpne	r2,r2,zero
  1813e8:	f800283a 	ret

001813ec <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  1813ec:	00c007c4 	movi	r3,31
  1813f0:	19401616 	blt	r3,r5,18144c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  1813f4:	defffe04 	addi	sp,sp,-8
  1813f8:	dfc00115 	stw	ra,4(sp)
  1813fc:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  181400:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  181404:	00ffff84 	movi	r3,-2
  181408:	80c6703a 	and	r3,r16,r3
  18140c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  181410:	280490fa 	slli	r2,r5,3
  181414:	00c00634 	movhi	r3,24
  181418:	18cad604 	addi	r3,r3,11096
  18141c:	1885883a 	add	r2,r3,r2
  181420:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  181424:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  181428:	30000226 	beq	r6,zero,181434 <alt_iic_isr_register+0x48>
  18142c:	01813640 	call	181364 <alt_ic_irq_enable>
  181430:	00000106 	br	181438 <alt_iic_isr_register+0x4c>
  181434:	018139c0 	call	18139c <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  181438:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  18143c:	dfc00117 	ldw	ra,4(sp)
  181440:	dc000017 	ldw	r16,0(sp)
  181444:	dec00204 	addi	sp,sp,8
  181448:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  18144c:	00bffa84 	movi	r2,-22
  181450:	f800283a 	ret

00181454 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  181454:	000170fa 	wrctl	ienable,zero
  181458:	f800283a 	ret

0018145c <memcmp>:
  18145c:	218d883a 	add	r6,r4,r6
  181460:	21800826 	beq	r4,r6,181484 <memcmp+0x28>
  181464:	20800003 	ldbu	r2,0(r4)
  181468:	28c00003 	ldbu	r3,0(r5)
  18146c:	10c00226 	beq	r2,r3,181478 <memcmp+0x1c>
  181470:	10c5c83a 	sub	r2,r2,r3
  181474:	f800283a 	ret
  181478:	21000044 	addi	r4,r4,1
  18147c:	29400044 	addi	r5,r5,1
  181480:	003ff706 	br	181460 <memcmp+0x4>
  181484:	0005883a 	mov	r2,zero
  181488:	f800283a 	ret

0018148c <__divsi3>:
  18148c:	20001b16 	blt	r4,zero,1814fc <__divsi3+0x70>
  181490:	000f883a 	mov	r7,zero
  181494:	28001616 	blt	r5,zero,1814f0 <__divsi3+0x64>
  181498:	200d883a 	mov	r6,r4
  18149c:	29001a2e 	bgeu	r5,r4,181508 <__divsi3+0x7c>
  1814a0:	00800804 	movi	r2,32
  1814a4:	00c00044 	movi	r3,1
  1814a8:	00000106 	br	1814b0 <__divsi3+0x24>
  1814ac:	10000d26 	beq	r2,zero,1814e4 <__divsi3+0x58>
  1814b0:	294b883a 	add	r5,r5,r5
  1814b4:	10bfffc4 	addi	r2,r2,-1
  1814b8:	18c7883a 	add	r3,r3,r3
  1814bc:	293ffb36 	bltu	r5,r4,1814ac <__divsi3+0x20>
  1814c0:	0005883a 	mov	r2,zero
  1814c4:	18000726 	beq	r3,zero,1814e4 <__divsi3+0x58>
  1814c8:	0005883a 	mov	r2,zero
  1814cc:	31400236 	bltu	r6,r5,1814d8 <__divsi3+0x4c>
  1814d0:	314dc83a 	sub	r6,r6,r5
  1814d4:	10c4b03a 	or	r2,r2,r3
  1814d8:	1806d07a 	srli	r3,r3,1
  1814dc:	280ad07a 	srli	r5,r5,1
  1814e0:	183ffa1e 	bne	r3,zero,1814cc <__divsi3+0x40>
  1814e4:	38000126 	beq	r7,zero,1814ec <__divsi3+0x60>
  1814e8:	0085c83a 	sub	r2,zero,r2
  1814ec:	f800283a 	ret
  1814f0:	014bc83a 	sub	r5,zero,r5
  1814f4:	39c0005c 	xori	r7,r7,1
  1814f8:	003fe706 	br	181498 <__divsi3+0xc>
  1814fc:	0109c83a 	sub	r4,zero,r4
  181500:	01c00044 	movi	r7,1
  181504:	003fe306 	br	181494 <__divsi3+0x8>
  181508:	00c00044 	movi	r3,1
  18150c:	003fee06 	br	1814c8 <__divsi3+0x3c>

00181510 <__modsi3>:
  181510:	20001716 	blt	r4,zero,181570 <__modsi3+0x60>
  181514:	000f883a 	mov	r7,zero
  181518:	2005883a 	mov	r2,r4
  18151c:	28001216 	blt	r5,zero,181568 <__modsi3+0x58>
  181520:	2900162e 	bgeu	r5,r4,18157c <__modsi3+0x6c>
  181524:	01800804 	movi	r6,32
  181528:	00c00044 	movi	r3,1
  18152c:	00000106 	br	181534 <__modsi3+0x24>
  181530:	30000a26 	beq	r6,zero,18155c <__modsi3+0x4c>
  181534:	294b883a 	add	r5,r5,r5
  181538:	31bfffc4 	addi	r6,r6,-1
  18153c:	18c7883a 	add	r3,r3,r3
  181540:	293ffb36 	bltu	r5,r4,181530 <__modsi3+0x20>
  181544:	18000526 	beq	r3,zero,18155c <__modsi3+0x4c>
  181548:	1806d07a 	srli	r3,r3,1
  18154c:	11400136 	bltu	r2,r5,181554 <__modsi3+0x44>
  181550:	1145c83a 	sub	r2,r2,r5
  181554:	280ad07a 	srli	r5,r5,1
  181558:	183ffb1e 	bne	r3,zero,181548 <__modsi3+0x38>
  18155c:	38000126 	beq	r7,zero,181564 <__modsi3+0x54>
  181560:	0085c83a 	sub	r2,zero,r2
  181564:	f800283a 	ret
  181568:	014bc83a 	sub	r5,zero,r5
  18156c:	003fec06 	br	181520 <__modsi3+0x10>
  181570:	0109c83a 	sub	r4,zero,r4
  181574:	01c00044 	movi	r7,1
  181578:	003fe706 	br	181518 <__modsi3+0x8>
  18157c:	00c00044 	movi	r3,1
  181580:	003ff106 	br	181548 <__modsi3+0x38>

00181584 <__udivsi3>:
  181584:	200d883a 	mov	r6,r4
  181588:	2900152e 	bgeu	r5,r4,1815e0 <__udivsi3+0x5c>
  18158c:	28001416 	blt	r5,zero,1815e0 <__udivsi3+0x5c>
  181590:	00800804 	movi	r2,32
  181594:	00c00044 	movi	r3,1
  181598:	00000206 	br	1815a4 <__udivsi3+0x20>
  18159c:	10000e26 	beq	r2,zero,1815d8 <__udivsi3+0x54>
  1815a0:	28000516 	blt	r5,zero,1815b8 <__udivsi3+0x34>
  1815a4:	294b883a 	add	r5,r5,r5
  1815a8:	10bfffc4 	addi	r2,r2,-1
  1815ac:	18c7883a 	add	r3,r3,r3
  1815b0:	293ffa36 	bltu	r5,r4,18159c <__udivsi3+0x18>
  1815b4:	18000826 	beq	r3,zero,1815d8 <__udivsi3+0x54>
  1815b8:	0005883a 	mov	r2,zero
  1815bc:	31400236 	bltu	r6,r5,1815c8 <__udivsi3+0x44>
  1815c0:	314dc83a 	sub	r6,r6,r5
  1815c4:	10c4b03a 	or	r2,r2,r3
  1815c8:	1806d07a 	srli	r3,r3,1
  1815cc:	280ad07a 	srli	r5,r5,1
  1815d0:	183ffa1e 	bne	r3,zero,1815bc <__udivsi3+0x38>
  1815d4:	f800283a 	ret
  1815d8:	0005883a 	mov	r2,zero
  1815dc:	f800283a 	ret
  1815e0:	00c00044 	movi	r3,1
  1815e4:	003ff406 	br	1815b8 <__udivsi3+0x34>

001815e8 <__umodsi3>:
  1815e8:	2005883a 	mov	r2,r4
  1815ec:	2900122e 	bgeu	r5,r4,181638 <__umodsi3+0x50>
  1815f0:	28001116 	blt	r5,zero,181638 <__umodsi3+0x50>
  1815f4:	01800804 	movi	r6,32
  1815f8:	00c00044 	movi	r3,1
  1815fc:	00000206 	br	181608 <__umodsi3+0x20>
  181600:	30000c26 	beq	r6,zero,181634 <__umodsi3+0x4c>
  181604:	28000516 	blt	r5,zero,18161c <__umodsi3+0x34>
  181608:	294b883a 	add	r5,r5,r5
  18160c:	31bfffc4 	addi	r6,r6,-1
  181610:	18c7883a 	add	r3,r3,r3
  181614:	293ffa36 	bltu	r5,r4,181600 <__umodsi3+0x18>
  181618:	18000626 	beq	r3,zero,181634 <__umodsi3+0x4c>
  18161c:	1806d07a 	srli	r3,r3,1
  181620:	11400136 	bltu	r2,r5,181628 <__umodsi3+0x40>
  181624:	1145c83a 	sub	r2,r2,r5
  181628:	280ad07a 	srli	r5,r5,1
  18162c:	183ffb1e 	bne	r3,zero,18161c <__umodsi3+0x34>
  181630:	f800283a 	ret
  181634:	f800283a 	ret
  181638:	00c00044 	movi	r3,1
  18163c:	003ff706 	br	18161c <__umodsi3+0x34>

00181640 <__mulsi3>:
  181640:	0005883a 	mov	r2,zero
  181644:	20000726 	beq	r4,zero,181664 <__mulsi3+0x24>
  181648:	20c0004c 	andi	r3,r4,1
  18164c:	2008d07a 	srli	r4,r4,1
  181650:	18000126 	beq	r3,zero,181658 <__mulsi3+0x18>
  181654:	1145883a 	add	r2,r2,r5
  181658:	294b883a 	add	r5,r5,r5
  18165c:	203ffa1e 	bne	r4,zero,181648 <__mulsi3+0x8>
  181660:	f800283a 	ret
  181664:	f800283a 	ret
