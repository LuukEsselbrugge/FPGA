
barcodescanner.elf:     file format elf32-littlenios2
barcodescanner.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00005020

Program Header:
    LOAD off    0x00001000 vaddr 0x00005000 paddr 0x00005000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00005020 paddr 0x00005020 align 2**12
         filesz 0x000005c4 memsz 0x000005c4 flags r-x
    LOAD off    0x000015e4 vaddr 0x000055e4 paddr 0x000055e8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000015ec vaddr 0x000055ec paddr 0x000055ec align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00005000  00005000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00005020  00005020  000015e8  2**0
                  CONTENTS
  2 .text         000005c4  00005020  00005020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000055e4  000055ec  000015e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  000055e4  000055e8  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000055ec  000055ec  000015ec  2**2
                  ALLOC, SMALL_DATA
  6 .VideoRAM     00000000  00000000  00000000  000015e8  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00005600  00005600  000015e8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001d8  00000000  00000000  00001610  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000015c4  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a29  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000a72  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000274  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000a7d  00000000  00000000  000044bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000807  00000000  00000000  00004f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00005740  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000138  00000000  00000000  000057a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000067d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000067d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000067e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000067e2  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000067e3  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000067ee  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000067f9  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000013  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  00006817  2**0
                  CONTENTS, READONLY
 27 .jdi          0000657c  00000000  00000000  00006835  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000439b2  00000000  00000000  0000cdb1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00005000 l    d  .entry	00000000 .entry
00005020 l    d  .exceptions	00000000 .exceptions
00005020 l    d  .text	00000000 .text
000055e4 l    d  .rodata	00000000 .rodata
000055e4 l    d  .rwdata	00000000 .rwdata
000055ec l    d  .bss	00000000 .bss
00000000 l    d  .VideoRAM	00000000 .VideoRAM
00005600 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../barcodescanner_bsp//obj/HAL/src/crt0.o
00005068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 rand.c
000055ec l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00005300 g     F .text	0000002c alt_main
000055e8 g       *ABS*	00000000 __flash_rwdata_start
000053f0 g     F .text	00000008 altera_nios2_gen2_irq_init
00005000 g     F .entry	0000001c __reset
00005020 g       *ABS*	00000000 __flash_exceptions_start
000055f8 g     O .bss	00000004 alt_argv
0000d5e4 g       *ABS*	00000000 _gp
0000532c g     F .text	00000004 usleep
00000000 g       *ABS*	00000000 __alt_mem_VideoRAM
00005000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005528 g     F .text	00000064 .hidden __udivsi3
000053f8 g     F .text	00000038 alt_icache_flush
00005600 g       *ABS*	00000000 __bss_end
0000506c g     F .text	0000004c drawColor
000053cc g     F .text	00000018 alt_dcache_flush_all
000055e8 g       *ABS*	00000000 __ram_rwdata_end
000055e4 g       *ABS*	00000000 __ram_rodata_end
000055e4 g     O .rwdata	00000004 jtag_uart_0
0000558c g     F .text	00000058 .hidden __umodsi3
00005600 g       *ABS*	00000000 end
00006000 g       *ABS*	00000000 __alt_stack_pointer
00005020 g     F .text	0000004c _start
00005160 g     F .text	00000060 rand
00005350 g     F .text	00000004 alt_sys_init
000055e4 g       *ABS*	00000000 __ram_rwdata_start
000055e4 g       *ABS*	00000000 __ram_rodata_start
00005354 g     F .text	00000078 alt_busy_sleep
00005600 g       *ABS*	00000000 __alt_stack_base
000055ec g       *ABS*	00000000 __bss_start
000050b8 g     F .text	00000094 main
000055f4 g     O .bss	00000004 alt_envp
0000514c g     F .text	00000014 srand
00005430 g     F .text	00000084 .hidden __divsi3
000055e4 g       *ABS*	00000000 __flash_rodata_start
00005330 g     F .text	00000020 alt_irq_init
000055fc g     O .bss	00000004 alt_argc
00005020 g       *ABS*	00000000 __ram_exceptions_start
000055e8 g       *ABS*	00000000 _edata
00005600 g       *ABS*	00000000 _end
00005020 g       *ABS*	00000000 __ram_exceptions_end
000054b4 g     F .text	00000074 .hidden __modsi3
00006000 g       *ABS*	00000000 __alt_data_end
0000501c g       .entry	00000000 _exit
000051c0 g     F .text	00000060 .hidden __muldi3
000053e4 g     F .text	0000000c alt_icache_flush_all
00005220 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00005000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    5000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    5004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    5008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    500c:	00bffd16 	blt	zero,r2,5004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    5010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    5014:	08540814 	ori	at,at,20512
    jmp r1
    5018:	0800683a 	jmp	at

0000501c <_exit>:
    501c:	00000000 	call	0 <__alt_mem_VideoRAM>

Disassembly of section .text:

00005020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    5020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    5024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    5028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    502c:	00bffd16 	blt	zero,r2,5024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    5030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    5034:	ded80014 	ori	sp,sp,24576
    movhi gp, %hi(_gp)
    5038:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    503c:	d6b57914 	ori	gp,gp,54756
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    5040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    5044:	10957b14 	ori	r2,r2,21996

    movhi r3, %hi(__bss_end)
    5048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    504c:	18d58014 	ori	r3,r3,22016

    beq r2, r3, 1f
    5050:	10c00326 	beq	r2,r3,5060 <_start+0x40>

0:
    stw zero, (r2)
    5054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    5058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    505c:	10fffd36 	bltu	r2,r3,5054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    5060:	00052200 	call	5220 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    5064:	00053000 	call	5300 <alt_main>

00005068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    5068:	003fff06 	br	5068 <alt_after_alt_main>

0000506c <drawColor>:
	  int b = rand()%(255-0 + 1) + 0;
	  drawColor((r<<16)| (g<<8) | b);
  }
}

void drawColor(int hex){
    506c:	defffc04 	addi	sp,sp,-16
    5070:	dc800215 	stw	r18,8(sp)
    5074:	dc400115 	stw	r17,4(sp)
    5078:	dc000015 	stw	r16,0(sp)
    507c:	dfc00315 	stw	ra,12(sp)
    5080:	2025883a 	mov	r18,r4
	int width = 50;
	int height = 50;

	int x = 0;
    5084:	0021883a 	mov	r16,zero
	while(x < width * height * 4){
    5088:	0449c404 	movi	r17,10000
		//Draw single pixel to video memory used by VGA controller
		IOWR_ALTERA_AVALON_PIO_DATA(x ,hex);
    508c:	84800035 	stwio	r18,0(r16)
		//Delay voor leuk effect
		usleep(500);
    5090:	01007d04 	movi	r4,500
		x+=4;
    5094:	84000104 	addi	r16,r16,4
	int x = 0;
	while(x < width * height * 4){
		//Draw single pixel to video memory used by VGA controller
		IOWR_ALTERA_AVALON_PIO_DATA(x ,hex);
		//Delay voor leuk effect
		usleep(500);
    5098:	000532c0 	call	532c <usleep>
void drawColor(int hex){
	int width = 50;
	int height = 50;

	int x = 0;
	while(x < width * height * 4){
    509c:	847ffb1e 	bne	r16,r17,508c <drawColor+0x20>
		IOWR_ALTERA_AVALON_PIO_DATA(x ,hex);
		//Delay voor leuk effect
		usleep(500);
		x+=4;
	}
}
    50a0:	dfc00317 	ldw	ra,12(sp)
    50a4:	dc800217 	ldw	r18,8(sp)
    50a8:	dc400117 	ldw	r17,4(sp)
    50ac:	dc000017 	ldw	r16,0(sp)
    50b0:	dec00404 	addi	sp,sp,16
    50b4:	f800283a 	ret

000050b8 <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"


int main()
{
    50b8:	defffa04 	addi	sp,sp,-24
    50bc:	dc800215 	stw	r18,8(sp)
  {
	  //Random RGB kleur
	  int r = rand()%(255-0 + 1) + 0;
	  int g = rand()%(255-0 + 1) + 0;
	  int b = rand()%(255-0 + 1) + 0;
	  drawColor((r<<16)| (g<<8) | b);
    50c0:	04a00034 	movhi	r18,32768
    50c4:	94803fc4 	addi	r18,r18,255
#include "system.h"
#include "altera_avalon_pio_regs.h"


int main()
{
    50c8:	dd000415 	stw	r20,16(sp)
    50cc:	dcc00315 	stw	r19,12(sp)
    50d0:	dfc00515 	stw	ra,20(sp)
    50d4:	dc400115 	stw	r17,4(sp)
    50d8:	dc000015 	stw	r16,0(sp)
    50dc:	9027883a 	mov	r19,r18
  {
	  //Random RGB kleur
	  int r = rand()%(255-0 + 1) + 0;
	  int g = rand()%(255-0 + 1) + 0;
	  int b = rand()%(255-0 + 1) + 0;
	  drawColor((r<<16)| (g<<8) | b);
    50e0:	053fc004 	movi	r20,-256
{

  while (1)
  {
	  //Random RGB kleur
	  int r = rand()%(255-0 + 1) + 0;
    50e4:	00051600 	call	5160 <rand>
    50e8:	1023883a 	mov	r17,r2
	  int g = rand()%(255-0 + 1) + 0;
    50ec:	00051600 	call	5160 <rand>
    50f0:	1021883a 	mov	r16,r2
	  int b = rand()%(255-0 + 1) + 0;
    50f4:	00051600 	call	5160 <rand>
	  drawColor((r<<16)| (g<<8) | b);
    50f8:	8c86703a 	and	r3,r17,r18
    50fc:	1800030e 	bge	r3,zero,510c <main+0x54>
    5100:	18ffffc4 	addi	r3,r3,-1
    5104:	1d06b03a 	or	r3,r3,r20
    5108:	18c00044 	addi	r3,r3,1
    510c:	1808943a 	slli	r4,r3,16
    5110:	84c6703a 	and	r3,r16,r19
    5114:	1800030e 	bge	r3,zero,5124 <main+0x6c>
    5118:	18ffffc4 	addi	r3,r3,-1
    511c:	1d06b03a 	or	r3,r3,r20
    5120:	18c00044 	addi	r3,r3,1
    5124:	1806923a 	slli	r3,r3,8
    5128:	20c6b03a 	or	r3,r4,r3
    512c:	14c8703a 	and	r4,r2,r19
    5130:	2000030e 	bge	r4,zero,5140 <main+0x88>
    5134:	213fffc4 	addi	r4,r4,-1
    5138:	2508b03a 	or	r4,r4,r20
    513c:	21000044 	addi	r4,r4,1
    5140:	1908b03a 	or	r4,r3,r4
    5144:	000506c0 	call	506c <drawColor>
    5148:	003fe606 	br	50e4 <main+0x2c>

0000514c <srand>:
    514c:	00800034 	movhi	r2,0
    5150:	10957b04 	addi	r2,r2,21996
    5154:	11000015 	stw	r4,0(r2)
    5158:	10000115 	stw	zero,4(r2)
    515c:	f800283a 	ret

00005160 <rand>:
    5160:	defffe04 	addi	sp,sp,-8
    5164:	dc000015 	stw	r16,0(sp)
    5168:	04000034 	movhi	r16,0
    516c:	84157b04 	addi	r16,r16,21996
    5170:	81000017 	ldw	r4,0(r16)
    5174:	81400117 	ldw	r5,4(r16)
    5178:	01932574 	movhi	r6,19605
    517c:	01d614b4 	movhi	r7,22610
    5180:	319fcb44 	addi	r6,r6,32557
    5184:	39fd0b44 	addi	r7,r7,-3027
    5188:	dfc00115 	stw	ra,4(sp)
    518c:	00051c00 	call	51c0 <__muldi3>
    5190:	11000044 	addi	r4,r2,1
    5194:	2085803a 	cmpltu	r2,r4,r2
    5198:	10c7883a 	add	r3,r2,r3
    519c:	00a00034 	movhi	r2,32768
    51a0:	10bfffc4 	addi	r2,r2,-1
    51a4:	1884703a 	and	r2,r3,r2
    51a8:	81000015 	stw	r4,0(r16)
    51ac:	80c00115 	stw	r3,4(r16)
    51b0:	dfc00117 	ldw	ra,4(sp)
    51b4:	dc000017 	ldw	r16,0(sp)
    51b8:	dec00204 	addi	sp,sp,8
    51bc:	f800283a 	ret

000051c0 <__muldi3>:
    51c0:	223fffcc 	andi	r8,r4,65535
    51c4:	2006d43a 	srli	r3,r4,16
    51c8:	32bfffcc 	andi	r10,r6,65535
    51cc:	3012d43a 	srli	r9,r6,16
    51d0:	4297383a 	mul	r11,r8,r10
    51d4:	1a95383a 	mul	r10,r3,r10
    51d8:	4251383a 	mul	r8,r8,r9
    51dc:	5804d43a 	srli	r2,r11,16
    51e0:	4291883a 	add	r8,r8,r10
    51e4:	1205883a 	add	r2,r2,r8
    51e8:	1a51383a 	mul	r8,r3,r9
    51ec:	1280022e 	bgeu	r2,r10,51f8 <__muldi3+0x38>
    51f0:	00c00074 	movhi	r3,1
    51f4:	40d1883a 	add	r8,r8,r3
    51f8:	1006d43a 	srli	r3,r2,16
    51fc:	21cf383a 	mul	r7,r4,r7
    5200:	314b383a 	mul	r5,r6,r5
    5204:	1004943a 	slli	r2,r2,16
    5208:	1a11883a 	add	r8,r3,r8
    520c:	5affffcc 	andi	r11,r11,65535
    5210:	3947883a 	add	r3,r7,r5
    5214:	12c5883a 	add	r2,r2,r11
    5218:	1a07883a 	add	r3,r3,r8
    521c:	f800283a 	ret

00005220 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5220:	deffff04 	addi	sp,sp,-4
    5224:	01000034 	movhi	r4,0
    5228:	01400034 	movhi	r5,0
    522c:	dfc00015 	stw	ra,0(sp)
    5230:	21157904 	addi	r4,r4,21988
    5234:	29557a04 	addi	r5,r5,21992

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5238:	2140061e 	bne	r4,r5,5254 <alt_load+0x34>
    523c:	01000034 	movhi	r4,0
    5240:	01400034 	movhi	r5,0
    5244:	21140804 	addi	r4,r4,20512
    5248:	29540804 	addi	r5,r5,20512
    524c:	2140121e 	bne	r4,r5,5298 <alt_load+0x78>
    5250:	00000b06 	br	5280 <alt_load+0x60>
    5254:	00c00034 	movhi	r3,0
    5258:	18d57a04 	addi	r3,r3,21992
    525c:	1907c83a 	sub	r3,r3,r4
    5260:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5264:	10fff526 	beq	r2,r3,523c <alt_load+0x1c>
    {
      *to++ = *from++;
    5268:	114f883a 	add	r7,r2,r5
    526c:	39c00017 	ldw	r7,0(r7)
    5270:	110d883a 	add	r6,r2,r4
    5274:	10800104 	addi	r2,r2,4
    5278:	31c00015 	stw	r7,0(r6)
    527c:	003ff906 	br	5264 <alt_load+0x44>
    5280:	01000034 	movhi	r4,0
    5284:	01400034 	movhi	r5,0
    5288:	21157904 	addi	r4,r4,21988
    528c:	29557904 	addi	r5,r5,21988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5290:	2140101e 	bne	r4,r5,52d4 <alt_load+0xb4>
    5294:	00000b06 	br	52c4 <alt_load+0xa4>
    5298:	00c00034 	movhi	r3,0
    529c:	18d40804 	addi	r3,r3,20512
    52a0:	1907c83a 	sub	r3,r3,r4
    52a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52a8:	10fff526 	beq	r2,r3,5280 <alt_load+0x60>
    {
      *to++ = *from++;
    52ac:	114f883a 	add	r7,r2,r5
    52b0:	39c00017 	ldw	r7,0(r7)
    52b4:	110d883a 	add	r6,r2,r4
    52b8:	10800104 	addi	r2,r2,4
    52bc:	31c00015 	stw	r7,0(r6)
    52c0:	003ff906 	br	52a8 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    52c4:	00053cc0 	call	53cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    52c8:	dfc00017 	ldw	ra,0(sp)
    52cc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    52d0:	00053e41 	jmpi	53e4 <alt_icache_flush_all>
    52d4:	00c00034 	movhi	r3,0
    52d8:	18d57904 	addi	r3,r3,21988
    52dc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    52e0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52e4:	18bff726 	beq	r3,r2,52c4 <alt_load+0xa4>
    {
      *to++ = *from++;
    52e8:	114f883a 	add	r7,r2,r5
    52ec:	39c00017 	ldw	r7,0(r7)
    52f0:	110d883a 	add	r6,r2,r4
    52f4:	10800104 	addi	r2,r2,4
    52f8:	31c00015 	stw	r7,0(r6)
    52fc:	003ff906 	br	52e4 <alt_load+0xc4>

00005300 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5300:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5304:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5308:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    530c:	00053300 	call	5330 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5310:	00053500 	call	5350 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5314:	d1a00417 	ldw	r6,-32752(gp)
    5318:	d1600517 	ldw	r5,-32748(gp)
    531c:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5320:	dfc00017 	ldw	ra,0(sp)
    5324:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5328:	00050b81 	jmpi	50b8 <main>

0000532c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    532c:	00053541 	jmpi	5354 <alt_busy_sleep>

00005330 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5330:	deffff04 	addi	sp,sp,-4
    5334:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    5338:	00053f00 	call	53f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    533c:	00800044 	movi	r2,1
    5340:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5344:	dfc00017 	ldw	ra,0(sp)
    5348:	dec00104 	addi	sp,sp,4
    534c:	f800283a 	ret

00005350 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    5350:	f800283a 	ret

00005354 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    5354:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5358:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    535c:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    5360:	dc000015 	stw	r16,0(sp)
    5364:	dfc00115 	stw	ra,4(sp)
    5368:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    536c:	00055280 	call	5528 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    5370:	10000e26 	beq	r2,zero,53ac <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5374:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5378:	013e0034 	movhi	r4,63488
    537c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5380:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5384:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    5388:	297fffc4 	addi	r5,r5,-1
    538c:	283ffe1e 	bne	r5,zero,5388 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5390:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    5394:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    5398:	18bffb16 	blt	r3,r2,5388 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    539c:	8020913a 	slli	r16,r16,4
    53a0:	843fffc4 	addi	r16,r16,-1
    53a4:	803ffe1e 	bne	r16,zero,53a0 <alt_busy_sleep+0x4c>
    53a8:	00000306 	br	53b8 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    53ac:	8020913a 	slli	r16,r16,4
    53b0:	843fffc4 	addi	r16,r16,-1
    53b4:	043ffe16 	blt	zero,r16,53b0 <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    53b8:	0005883a 	mov	r2,zero
    53bc:	dfc00117 	ldw	ra,4(sp)
    53c0:	dc000017 	ldw	r16,0(sp)
    53c4:	dec00204 	addi	sp,sp,8
    53c8:	f800283a 	ret

000053cc <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    53cc:	0005883a 	mov	r2,zero
    53d0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    53d4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    53d8:	10800804 	addi	r2,r2,32
    53dc:	10fffd1e 	bne	r2,r3,53d4 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    53e0:	f800283a 	ret

000053e4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    53e4:	01440004 	movi	r5,4096
    53e8:	0009883a 	mov	r4,zero
    53ec:	00053f81 	jmpi	53f8 <alt_icache_flush>

000053f0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    53f0:	000170fa 	wrctl	ienable,zero
    53f4:	f800283a 	ret

000053f8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    53f8:	00840004 	movi	r2,4096
    53fc:	1140012e 	bgeu	r2,r5,5404 <alt_icache_flush+0xc>
    5400:	100b883a 	mov	r5,r2
    5404:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5408:	2005883a 	mov	r2,r4
    540c:	1140032e 	bgeu	r2,r5,541c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    5410:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    5414:	10800804 	addi	r2,r2,32
    5418:	003ffc06 	br	540c <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    541c:	210007cc 	andi	r4,r4,31
    5420:	20000126 	beq	r4,zero,5428 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    5424:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5428:	0000203a 	flushp
    542c:	f800283a 	ret

00005430 <__divsi3>:
    5430:	20001b16 	blt	r4,zero,54a0 <__divsi3+0x70>
    5434:	000f883a 	mov	r7,zero
    5438:	28001616 	blt	r5,zero,5494 <__divsi3+0x64>
    543c:	200d883a 	mov	r6,r4
    5440:	29001a2e 	bgeu	r5,r4,54ac <__divsi3+0x7c>
    5444:	00800804 	movi	r2,32
    5448:	00c00044 	movi	r3,1
    544c:	00000106 	br	5454 <__divsi3+0x24>
    5450:	10000d26 	beq	r2,zero,5488 <__divsi3+0x58>
    5454:	294b883a 	add	r5,r5,r5
    5458:	10bfffc4 	addi	r2,r2,-1
    545c:	18c7883a 	add	r3,r3,r3
    5460:	293ffb36 	bltu	r5,r4,5450 <__divsi3+0x20>
    5464:	0005883a 	mov	r2,zero
    5468:	18000726 	beq	r3,zero,5488 <__divsi3+0x58>
    546c:	0005883a 	mov	r2,zero
    5470:	31400236 	bltu	r6,r5,547c <__divsi3+0x4c>
    5474:	314dc83a 	sub	r6,r6,r5
    5478:	10c4b03a 	or	r2,r2,r3
    547c:	1806d07a 	srli	r3,r3,1
    5480:	280ad07a 	srli	r5,r5,1
    5484:	183ffa1e 	bne	r3,zero,5470 <__divsi3+0x40>
    5488:	38000126 	beq	r7,zero,5490 <__divsi3+0x60>
    548c:	0085c83a 	sub	r2,zero,r2
    5490:	f800283a 	ret
    5494:	014bc83a 	sub	r5,zero,r5
    5498:	39c0005c 	xori	r7,r7,1
    549c:	003fe706 	br	543c <__divsi3+0xc>
    54a0:	0109c83a 	sub	r4,zero,r4
    54a4:	01c00044 	movi	r7,1
    54a8:	003fe306 	br	5438 <__divsi3+0x8>
    54ac:	00c00044 	movi	r3,1
    54b0:	003fee06 	br	546c <__divsi3+0x3c>

000054b4 <__modsi3>:
    54b4:	20001716 	blt	r4,zero,5514 <__modsi3+0x60>
    54b8:	000f883a 	mov	r7,zero
    54bc:	2005883a 	mov	r2,r4
    54c0:	28001216 	blt	r5,zero,550c <__modsi3+0x58>
    54c4:	2900162e 	bgeu	r5,r4,5520 <__modsi3+0x6c>
    54c8:	01800804 	movi	r6,32
    54cc:	00c00044 	movi	r3,1
    54d0:	00000106 	br	54d8 <__modsi3+0x24>
    54d4:	30000a26 	beq	r6,zero,5500 <__modsi3+0x4c>
    54d8:	294b883a 	add	r5,r5,r5
    54dc:	31bfffc4 	addi	r6,r6,-1
    54e0:	18c7883a 	add	r3,r3,r3
    54e4:	293ffb36 	bltu	r5,r4,54d4 <__modsi3+0x20>
    54e8:	18000526 	beq	r3,zero,5500 <__modsi3+0x4c>
    54ec:	1806d07a 	srli	r3,r3,1
    54f0:	11400136 	bltu	r2,r5,54f8 <__modsi3+0x44>
    54f4:	1145c83a 	sub	r2,r2,r5
    54f8:	280ad07a 	srli	r5,r5,1
    54fc:	183ffb1e 	bne	r3,zero,54ec <__modsi3+0x38>
    5500:	38000126 	beq	r7,zero,5508 <__modsi3+0x54>
    5504:	0085c83a 	sub	r2,zero,r2
    5508:	f800283a 	ret
    550c:	014bc83a 	sub	r5,zero,r5
    5510:	003fec06 	br	54c4 <__modsi3+0x10>
    5514:	0109c83a 	sub	r4,zero,r4
    5518:	01c00044 	movi	r7,1
    551c:	003fe706 	br	54bc <__modsi3+0x8>
    5520:	00c00044 	movi	r3,1
    5524:	003ff106 	br	54ec <__modsi3+0x38>

00005528 <__udivsi3>:
    5528:	200d883a 	mov	r6,r4
    552c:	2900152e 	bgeu	r5,r4,5584 <__udivsi3+0x5c>
    5530:	28001416 	blt	r5,zero,5584 <__udivsi3+0x5c>
    5534:	00800804 	movi	r2,32
    5538:	00c00044 	movi	r3,1
    553c:	00000206 	br	5548 <__udivsi3+0x20>
    5540:	10000e26 	beq	r2,zero,557c <__udivsi3+0x54>
    5544:	28000516 	blt	r5,zero,555c <__udivsi3+0x34>
    5548:	294b883a 	add	r5,r5,r5
    554c:	10bfffc4 	addi	r2,r2,-1
    5550:	18c7883a 	add	r3,r3,r3
    5554:	293ffa36 	bltu	r5,r4,5540 <__udivsi3+0x18>
    5558:	18000826 	beq	r3,zero,557c <__udivsi3+0x54>
    555c:	0005883a 	mov	r2,zero
    5560:	31400236 	bltu	r6,r5,556c <__udivsi3+0x44>
    5564:	314dc83a 	sub	r6,r6,r5
    5568:	10c4b03a 	or	r2,r2,r3
    556c:	1806d07a 	srli	r3,r3,1
    5570:	280ad07a 	srli	r5,r5,1
    5574:	183ffa1e 	bne	r3,zero,5560 <__udivsi3+0x38>
    5578:	f800283a 	ret
    557c:	0005883a 	mov	r2,zero
    5580:	f800283a 	ret
    5584:	00c00044 	movi	r3,1
    5588:	003ff406 	br	555c <__udivsi3+0x34>

0000558c <__umodsi3>:
    558c:	2005883a 	mov	r2,r4
    5590:	2900122e 	bgeu	r5,r4,55dc <__umodsi3+0x50>
    5594:	28001116 	blt	r5,zero,55dc <__umodsi3+0x50>
    5598:	01800804 	movi	r6,32
    559c:	00c00044 	movi	r3,1
    55a0:	00000206 	br	55ac <__umodsi3+0x20>
    55a4:	30000c26 	beq	r6,zero,55d8 <__umodsi3+0x4c>
    55a8:	28000516 	blt	r5,zero,55c0 <__umodsi3+0x34>
    55ac:	294b883a 	add	r5,r5,r5
    55b0:	31bfffc4 	addi	r6,r6,-1
    55b4:	18c7883a 	add	r3,r3,r3
    55b8:	293ffa36 	bltu	r5,r4,55a4 <__umodsi3+0x18>
    55bc:	18000626 	beq	r3,zero,55d8 <__umodsi3+0x4c>
    55c0:	1806d07a 	srli	r3,r3,1
    55c4:	11400136 	bltu	r2,r5,55cc <__umodsi3+0x40>
    55c8:	1145c83a 	sub	r2,r2,r5
    55cc:	280ad07a 	srli	r5,r5,1
    55d0:	183ffb1e 	bne	r3,zero,55c0 <__umodsi3+0x34>
    55d4:	f800283a 	ret
    55d8:	f800283a 	ret
    55dc:	00c00044 	movi	r3,1
    55e0:	003ff706 	br	55c0 <__umodsi3+0x34>
